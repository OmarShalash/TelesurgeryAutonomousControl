<?xml version="1.0" encoding="UTF-8"?>
<Caren2Project id="0" ApplicationVersion="637" ConsoleWidth="320" ConsoleShowDeviceConnections="true" version="3.18.0">
  <Documentation id="0" Description="" Instructions="" Changes="" Authors="" Organization="" UUID="" Date="20150128"/>
  <FrameControl id="0" ViewerMax="60" IGMax="60" DFlowMin="30" DFlowMax="300" UseViewerMax="true" UseIGMax="false" UseDFlowMin="false" UseDFlowMax="true"/>
  <SystemState id="0" HighPerformanceMode="false"/>
  <InputOutput>
    <Tab id="0" name="Default" color="39"/>
    <Tab id="0" name="cluster" color="60"/>
    <Parameter param_type="0" tab="1" id="0" name="Number of Markers" came="Number of Markers" width="3" value="12" min="0" max="30" step="1" default="12"/>
    <EnableSubjectTab enable="0"/>
    <EnableMessages enable="0"/>
  </InputOutput>
  <Events>
    <event id="Play"/>
    <event id="Stop"/>
    <event id="Reset"/>
    <event id="Calibrate"/>
    <event id="Action"/>
  </Events>
  <Modules>
    <module id="1" type="MoCap" title="MoCap">
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Record" action="2"/>
      <event_mapping event="Reset" action="4"/>
      <event_mapping event="Stop" action="3"/>
      <data id="0" Source="0" MinimumForce="0" SimulateSinglePlate="false" ApplyMotionBaseTransformationOnForcePlates="false" ApplyStaticInertiaCompensationOnForcePlates="false" HBMSkelModelType="0" HBMOutputAbsoluteForces="false" UseNewHBMModel="true" AutoUpdateWeight="false" Mesh="" PropagateTransformation="false" FileFormat="0" OutputFile="C:\Ph.D\Omar shalesh 26-01-2015\Lab Recordings of MAkO Real Parts (2)\D-Flow files\The Two Probes0001.txt" InputFile="C:\My Data\Study\Ph.D\Omar shalesh 26-01-2015\Lab Recordings of MAkO Real Parts (2)\D-Flow files\The Two Probes00010002.txt" LoopPlayBack="true" UseUnique="true" WriteOutputChannelsOnly="false" WaitForNewFrame="false" UseOutputFilter="false" OutputFilterFreq="6.8" UseFileFilter="false" FileFilterFreq="10" VMBEnabled="false" VMBArmsMode="0" VMBLegsMode="0" VMBMode="0" VMBDelay="0.5" VMBShowMirrorPlanes="false" ShowCaptureVolume="false">
        <Configuration id="0" Flags="1" VST="" LabeledMarkers="3" LabeledSegments="1" LabeledMode="0" UnlabeledChannels="12" AnalogChannels="16" ForcePlates="2" OutputChannels="111111111111111111111111111111111111"/>
        <ForcePlateBonte id="0" MinimumForce="0.1" UseCrossTalkMatrix="true" ForcePlateMode="0"/>
        <HBMSubjectInfo id="0" BodyMass="70" MarkerDiameter="0.015" KneeWidth="0.1" AnkleWidth="0.07" FilterFreq="4" Gender="0"/>
        <MarkerVisualization id="0" ShowMarkers="false" ShowMarkerLabels="false" MarkerScale="0.02"/>
        <SkeletonVisualization id="0" SphereSize="0.06" CylinderSize="0.03" ShowSkeleton="false" ShowLabels="false"/>
        <MeshVisualization id="0" Show="false" ApplyRotationsOnly="false" LocalOrientations="false" SkeletonVisible="false" SkeletonVisualizationScale="1"/>
        <ForceVisualization id="0" MinimumForce="0" ScaleFactor="0.01" ArrowDiameter="0.05" Show="false"/>
        <HBMVisualization id="0" InactiveR="0.75" InactiveG="0" InactiveB="0" InactiveA="1" IntermediateR="0" IntermediateG="0.75" IntermediateB="0" IntermediateA="1" ActiveR="1" ActiveG="1" ActiveB="1" ActiveA="1" Show="false" ShowJointMoments="false" ShowMuscleForces="true" Mesh="HBM.mesh" RotationsOnly="false" ColorSensitivity="1"/>
        <HMBSkelVisualization id="0" InactiveR="0.75" InactiveG="0" InactiveB="0" InactiveA="1" IntermediateR="0" IntermediateG="0.75" IntermediateB="0" IntermediateA="1" ActiveR="1" ActiveG="1" ActiveB="1" ActiveA="1" RotationsOnly="false" ColorSensitivity="1" show="true" showMuscleForces="true" showSkeleton="false" showMoments="false"/>
        <Sorter id="0" mode="1" nb="12" sort_x="0" sort_y="0" sort_z="0" template=""/>
        <GrailConfig id="0" OutputFileGrail="%DATA%\.mox" GrailProcessingEnabled="false" GrailVideoEnabled="false" OutputChannelsEnabled="false" UseUniqueOutputName="true" OutputStepParameters="true" OutputEMGParameters="true" OutputKineParameters="true" OutputMomentParameters="true" OutputPowerParameters="true" DisableStepProcessingWhenThreadmillNotMoving="true" NormalizeMomentsAndPowersOnBodyMass="false" LeftHSEvent="&lt;NONE&gt;" LeftTOEvent="&lt;NONE&gt;" RightHSEvent="&lt;NONE&gt;" RightTOEvent="&lt;NONE&gt;" StepDetectionAlgorithm="0"/>
        <HBMConfig id="0" AllowMissingMarkers="false" AllowSingleElbowOrWrist="true" AllowMissingMarkersDuringSolve="false" CalculateMuscleForces="true"/>
      </data>
    </module>
    <module id="2" type="Parameter" title="Parameter">
      <data id="0"/>
    </module>
    <module id="3" type="Script" title="Constants&#10;">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--Functions&#10;--Read Clusters&#10;function readClusters()&#10;&#9;readTibial()&#10;&#9;readFemur()&#10;&#9;--readBase()&#10;&#9;--readEndEffector()&#10;&#9;readGreenProbe()&#10;&#9;--readBlueProbe()&#10;end&#10;function readTibial()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\TibialArrayDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;TibialArrayDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;end&#10;function readFemur()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\FemoralArrayDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;FemoralArrayDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;end&#10;--[[  --GET CLUSTERS DATA FIRST!!&#10;function readBase()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\BaseArrayDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;BaseArrayDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;&#10;end&#10;--]]&#10;--[[  --GET CLUSTERS DATA FIRST!!&#10;function readEndEffector()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\EndEffectorArrayDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;EndEffectorArrayDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;end&#10;--]]&#10;function readGreenProbe()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\GreenProbeDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 3 do&#10;&#9;&#9;GreenProbeDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;end&#10;--[[  --GET CLUSTERS DATA FIRST!!&#10;function readBlueProbe()&#10;&#9;file = io.open(&quot;C:\\CAREN Resources\\Data\\Clusters Data\\Mako\\BlueProbeDims.txt&quot;, &quot;r&quot;)&#10;&#9;io.input(file)&#10;&#9;for i = 1, 3 do&#10;&#9;&#9;BlueProbeDims[i] = io.read()&#10;&#9;end&#10;&#9;file:close()&#10;end&#10;--]]&#10;--Variables-----------------------------------&#10;theAvoidNumber = 99999.44444&#10;toleranceFactor = 0.0017&#10;TibialArrayDims = TibialArrayDims or {}&#10;FemoralArrayDims = FemoralArrayDims or {}&#10;EndEffectorArrayDims = EndEffectorArrayDims or {}&#10;BaseArrayDims = BaseArrayDims or {}&#10;BlueProbeDims = BlueProbeDims or {}&#10;GreenProbeDims = GreenProbeDims or {}&#10;init = init or 0&#10;allOuts = allOuts or {}&#10;--Preprocssing--------------------------------&#10;--init the code-------------------------------&#10;if init == 0 then&#10;&#9;readClusters()&#10;&#9;allOuts[1] = &quot;Tolerance Factor&quot;&#10;&#9;allOuts[2] = &quot;The Avoid Number&quot;&#10;&#9;counter = 3&#10;&#9;for i = 1, #TibialArrayDims do&#10;&#9;&#9;allOuts[counter] = &quot;TibialArrayDims &quot;..i&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;for i = 1, #FemoralArrayDims do&#10;&#9;&#9;allOuts[counter] = &quot;FemoralArrayDims &quot;..i&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;for i = 1, #GreenProbeDims do&#10;&#9;&#9;allOuts[counter] = &quot;GreenProbeDims &quot;..i&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;outputs.set(&quot;Tolerance Factor&quot;, toleranceFactor)&#10;&#9;outputs.set(&quot;The Avoid Number&quot;, theAvoidNumber)&#10;&#9;init = 1&#10;end&#10;&#10;&#10;--processing&#10;for i = 1, #TibialArrayDims do&#10;&#9;outputs.set(&quot;TibialArrayDims &quot;..i, TibialArrayDims[i])&#10;end&#10;for i = 1, #FemoralArrayDims do&#10;&#9;outputs.set(&quot;FemoralArrayDims &quot;..i, FemoralArrayDims[i])&#10;end&#10;for i = 1, #GreenProbeDims do&#10;&#9;outputs.set(&quot;GreenProbeDims &quot;..i, GreenProbeDims[i])&#10;end&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Input1"/>
            <String value="Input2"/>
            <String value="Input3"/>
            <String value="Input4"/>
            <String value="Input5"/>
            <String value="Input6"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="TibialArrayDims 1"/>
            <String value="TibialArrayDims 2"/>
            <String value="TibialArrayDims 3"/>
            <String value="TibialArrayDims 4"/>
            <String value="TibialArrayDims 5"/>
            <String value="TibialArrayDims 6"/>
            <String value="FemoralArrayDims 1"/>
            <String value="FemoralArrayDims 2"/>
            <String value="FemoralArrayDims 3"/>
            <String value="FemoralArrayDims 4"/>
            <String value="FemoralArrayDims 5"/>
            <String value="FemoralArrayDims 6"/>
            <String value="GreenProbeDims 1"/>
            <String value="GreenProbeDims 2"/>
            <String value="GreenProbeDims 3"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="4" type="Script" title="Clustering Green Probe&#10;">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--Functions------------------------------&#10;function showMarkers()&#10;&#9;for i = 1, #greenProbeArray do&#10;&#9;&#9;object.setposition(drawMarkers[i],greenProbeArray[i][&quot;x&quot;], greenProbeArray[i][&quot;y&quot;], greenProbeArray[i][&quot;z&quot;])&#10;&#9;&#9;--print(&quot;Marker NO. &quot;..i..&quot; CoOrdinates: &quot;, markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(drawMarkers[i])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, #drawMarkers do&#10;&#9;&#9;object.hide(drawMarkers[i])&#10;&#9;end&#10;end&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, x do&#10;&#9;&#9;print(i,A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;&#9;print(&quot;-------------------------------------&quot;)&#10;end&#10;&#10;function printMarkersArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][&quot;x&quot;], A[i][&quot;y&quot;], A[i][&quot;z&quot;])&#10;&#9;end&#10;end&#10;&#10;function printSimpleArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i])&#10;&#9;end&#10;end&#10;function countMarkers(foundMarkers, number)&#10;&#9;found = false&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Value&quot;] == number then&#10;&#9;&#9;&#9;foundMarkers[i][&quot;Count&quot;] = foundMarkers[i][&quot;Count&quot;] + 1&#10;&#9;&#9;&#9;found = true&#10;&#9;&#9;&#9;return foundMarkers&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if found == false then&#10;&#9;&#9;c = (#foundMarkers)+1&#10;&#9;&#9;foundMarkers[c] = {}&#10;&#9;&#9;foundMarkers[c][&quot;Value&quot;] = number&#10;&#9;&#9;foundMarkers[c][&quot;Count&quot;] = 1&#10;&#9;end&#10;&#9;return foundMarkers&#10;end&#10;function&#9;doubleCheck()&#10;&#9;foundMarkers = {}&#10;&#9;foundMarkers[1] = {}&#10;&#9;foundMarkers[2] = {}&#10;&#9;foundMarkers[1][&quot;Value&quot;] = greenProbeArray[1][2]&#10;&#9;foundMarkers[1][&quot;Count&quot;] = 1&#10;&#9;foundMarkers[2][&quot;Value&quot;] = greenProbeArray[1][3]&#10;&#9;foundMarkers[2][&quot;Count&quot;] = 1&#10;&#9;for i = 2, #greenProbeArray do&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, greenProbeArray[i][2])&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, greenProbeArray[i][3])&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;temp = {}&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Count&quot;] &gt; 1 then&#10;&#9;&#9;&#9;temp[counter] = markers[foundMarkers[i][&quot;Value&quot;]]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;--print(foundMarkers[i][&quot;Value&quot;],&quot;-&gt;&quot;,foundMarkers[i][&quot;Count&quot;])&#10;&#9;end&#10;--[[&#10;print(&quot;-------------------------------------&quot;)&#10;print(#temp, &quot;temp&quot;)&#10;print(&quot;-------------------------------------&quot;)&#10;printArray(greenProbeArray)&#10;--]]&#10;&#9;if #temp == 3 then&#10;&#9;&#9;greenProbeArray = temp&#10;&#9;&#9;return true&#10;&#9;end&#10;&#9;return false&#10;end&#10;function findGreenProbeArray(A, tF, itrationNumber)&#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= GreenProbeArrayDims[1]-tF and A[i][1] &lt;= GreenProbeArrayDims[1]+tF then&#10;&#9;&#9;&#9;greenProbeArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= GreenProbeArrayDims[2]-tF and A[i][1] &lt;= GreenProbeArrayDims[2]+tF then&#10;&#9;&#9;&#9;greenProbeArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= GreenProbeArrayDims[3]-tF and A[i][1] &lt;= GreenProbeArrayDims[3]+tF then&#10;&#9;&#9;&#9;greenProbeArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;&#9;--print(&quot;found &quot;, counter, &quot;TF = &quot;, tF, #A)&#9;&#10;&#9;end&#10;--print(#greenProbeArray)&#10;--printArray(greenProbeArray)&#10;&#9;if counter &lt; 4 then&#10;--print(&quot;here1&quot;)&#10;&#9;&#9;greenProbeArray = {}&#10;&#9;&#9;--print(&quot;Nah!&quot;)&#10;&#9;elseif doubleCheck() then&#10;--print(&quot;here2&quot;, tF)&#10;&#9;&#9;return &quot;found&quot;&#10;&#9;elseif itrationNumber &lt; maxNoItrations then&#10;--print(&quot;here3&quot;, tF)&#10;&#9;&#9;return findGreenProbeArray(A, tF -0.0001, itrationNumber + 1)&#10;&#9;end&#10;&#9;greenProbeArray = {}&#10;&#9;--print(&quot;not Found!&quot;)&#10;&#9;return &quot;not found&quot;&#10;end&#10;&#10;&#10;function getAVG(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] + point2[&quot;x&quot;]) / 2.0&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] + point2[&quot;y&quot;]) / 2.0&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] + point2[&quot;z&quot;]) / 2.0&#10;&#9;return a&#10;end&#10;function getVector(point1, point2)&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = point1[&quot;x&quot;] - point2[&quot;x&quot;]&#10;&#9;vector[&quot;y&quot;] = point1[&quot;y&quot;] - point2[&quot;y&quot;]&#10;&#9;vector[&quot;z&quot;] = point1[&quot;z&quot;] - point2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getUNIVector(vector, magV)&#10;&#9;vector[&quot;x&quot;] = vector[&quot;x&quot;]/magV&#10;&#9;vector[&quot;y&quot;] = vector[&quot;y&quot;]/magV&#10;&#9;vector[&quot;z&quot;] = vector[&quot;z&quot;]/magV&#10;&#9;return vector&#10;end&#10;function crossProduct(vector1, vector2) &#10;&#9;--[[&#10;&#9;&#9;cx = aybz - azby&#10;&#9;&#9;cy = azbx - axbz&#10;&#9;&#9;cz = axby - aybx  &#10;&#9;--]]&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = vector1[&quot;y&quot;] * vector2[&quot;z&quot;] - vector1[&quot;z&quot;] * vector2[&quot;y&quot;]&#10;&#9;vector[&quot;y&quot;] = vector1[&quot;z&quot;] * vector2[&quot;x&quot;] - vector1[&quot;x&quot;] * vector2[&quot;z&quot;]&#10;&#9;vector[&quot;z&quot;] = vector1[&quot;x&quot;] * vector2[&quot;y&quot;] - vector1[&quot;y&quot;] * vector2[&quot;x&quot;]&#10;&#9;return vector&#10;end&#10;function getMagnitude(point)&#10;&#9;vector = (point[&quot;x&quot;]^2 + point[&quot;y&quot;]^2 + point[&quot;z&quot;]^2)^0.5&#10;&#9;return vector&#10;end&#10;function transform(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + aP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + aP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = bP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = cP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;obj&quot;] = markers[4][&quot;obj&quot;]&#10;&#9;tfm[&quot;pos&quot;] = &quot;fourth&quot;&#10;&#9;return tfm&#10;end&#10;function transformTranspose(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;x&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;x&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = aP[&quot;y&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = aP[&quot;z&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;obj&quot;] = markers[4][&quot;obj&quot;]&#10;&#9;tfm[&quot;pos&quot;] = &quot;fourth&quot;&#10;&#9;return tfm&#10;end&#10;function getTipLocation()&#10;&#9;localOrigin = getAVG(left, right)&#10;&#9;a = getVector(far, localOrigin)&#10;&#9;bt = getVector(left, localOrigin)&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;--printVector(localOrigin)&#10;--[[&#10;printVector(a)&#10;printVector(b)&#10;printVector(c)&#10;print(magA)&#10;print(magC)&#10;print(magB)&#10;--]]&#10;&#9;aUNI = getUNIVector(a, magA)&#10;&#9;bUNI = getUNIVector(b, magB)&#10;&#9;cUNI = getUNIVector(c, magC)&#10;&#9;markers[4] = transformTranspose(aUNI, bUNI, cUNI, fourthMarker)&#10;&#9;--markers[4] = transform(aUNI, bUNI, cUNI, fourthMarker)&#10;&#9;markers[4][&quot;x&quot;] = markers[4][&quot;x&quot;] + localOrigin[&quot;x&quot;]&#10;&#9;markers[4][&quot;y&quot;] = markers[4][&quot;y&quot;] + localOrigin[&quot;y&quot;]&#10;&#9;markers[4][&quot;z&quot;] = markers[4][&quot;z&quot;] + localOrigin[&quot;z&quot;]&#10;&#10;end&#10;--Variables------------------------------&#10;noOfMarkers = noOfMarkers or 0&#10;toleranceFactor = toleranceFactor or 0&#10;theAvoidNumber = theAvoidNumber or 0&#10;greenProbeArray = greenProbeArray or {}&#10;GreenProbeArrayDims = GreenProbeArrayDims or {}&#10;expectedNoOfCombinations = expectedNoOfCombinations or 0&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;maxNoItrations = maxNoItrations or 20&#10;drawMarkers = drawMarkers or {}&#10;markerSize = markerSize or 0.05&#10;right = right or 0&#10;left = left or 0&#10;far = far or 0&#10;localOrigin = localOrigin or {}&#10;fourthMarker = {}&#10;fourthMarker[&quot;x&quot;] = 0.27&#10;fourthMarker[&quot;y&quot;] = 0&#10;fourthMarker[&quot;z&quot;] = 0&#10;allIns = allIns or {}&#10;allOuts = allOuts or {}&#10;markers = markers or {}&#10;sitiuation = sitiuation or &quot;not found&quot;&#10;init = init or 0&#10;--Initialization-------------------------&#10;if init == 0 then&#10;&#9;for i = 1, 4 do&#10;&#9;&#9;drawMarkers[i]=object.create(&quot;Sphere&quot;,&quot;Green&quot;)&#10;&#9;&#9;node.setscaling(drawMarkers[i], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#9;allIns[1] = &quot;Number of Markers&quot;&#10;&#9;allIns[2] = &quot;Tolerance Factor&quot;&#10;&#9;allIns[3] = &quot;The Avoid Number&quot;&#10;&#9;for i = 4, 6 do&#10;&#9;&#9;allIns[i] = &quot;GreenProbeArrayDims &quot;..i-3&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;noOfMarkers = inputs.get(&quot;Number of Markers&quot;)&#10;&#9;toleranceFactor = inputs.get(&quot;Tolerance Factor&quot;)&#10;&#9;theAvoidNumber = inputs.get(&quot;The Avoid Number&quot;)&#10;&#9;for i = 1, 3 do&#10;&#9;&#9;GreenProbeArrayDims[i] = inputs.get(&quot;GreenProbeArrayDims &quot;..i)&#10;&#9;end&#10;&#9;for i = 7, 6 + noOfMarkers*3 do&#10;&#9;&#9;allIns[i] = &quot;Channel&quot;..i-6&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;counter = 1&#10;&#9;i = 1&#10;&#9;while i &lt; (3 * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;GreenProbe Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;GreenProbe Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;GreenProbe Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;allOuts[i] = &quot;Sitiuation&quot;&#10;&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;--Processing-----------------------------&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j] = {}&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel&quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel&quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel&quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;expectedNoOfCombinations = noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;x = 1&#10;y = 2&#10;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;if y == noOfMarkers then&#10;&#9;&#9;x = x+1&#10;&#9;&#9;y = x+1&#10;&#9;else&#10;&#9;&#9;y = y+1&#10;&#9;end&#10;end&#10;eculideanDistanceArray = sortArrayAssending(eculideanDistanceArray)&#10;printArray(eculideanDistanceArray)&#10;sitiuation = findGreenProbeArray(eculideanDistanceArray, toleranceFactor, 1)&#10;--printMarkersArray(greenProbeArray)&#10;&#10;for i = 1, (table.getn(greenProbeArray)) do&#10;&#9;if greenProbeArray[i] ~= nil then&#10;&#9;&#9;if greenProbeArray[i][&quot;x&quot;] ~= nil or greenProbeArray[i][&quot;y&quot;] ~= nil or greenProbeArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; X&quot;, greenProbeArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; Y&quot;, greenProbeArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; Z&quot;, greenProbeArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; X&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; Y&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;GreenProbe Array &quot;..i..&quot; Z&quot;, theAvoidNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;print(i)&#10;end&#10;if sitiuation == &quot;found&quot; then&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 1)&#10;&#9;showMarkers()&#10;else&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 2)&#10;&#9;hideMarkers()&#10;end" collisions="false">
        <inputs>
          <StringArray>
            <String value="Number of Markers"/>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="GreenProbeArrayDims 1"/>
            <String value="GreenProbeArrayDims 2"/>
            <String value="GreenProbeArrayDims 3"/>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="GreenProbe Array 1 X"/>
            <String value="GreenProbe Array 1 Y"/>
            <String value="GreenProbe Array 1 Z"/>
            <String value="GreenProbe Array 2 X"/>
            <String value="GreenProbe Array 2 Y"/>
            <String value="GreenProbe Array 2 Z"/>
            <String value="GreenProbe Array 3 X"/>
            <String value="GreenProbe Array 3 Y"/>
            <String value="GreenProbe Array 3 Z"/>
            <String value="Sitiuation"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="5" type="Script" title="Sounding">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;function checkNoSoundPlaying()&#10;&#9;for i = 1, table.getn(sounds) do&#10;&#9;&#9;if sound.isplaying(sounds[i][&quot;F&quot;]) or sound.isplaying(sounds[i][&quot;NF&quot;])then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;soundOrder = soundOrder or {}&#10;sounds = sounds or {}&#10;previousSoundPlayed = previousSoundPlayed or {0, 0, 0, 0, 0, 0}&#10;--init the code------------------------------------&#10;if init == 0 then&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;&#9;sounds[i] = {}&#10;&#9;end&#10;&#10;&#9;sounds[1][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Tibial_Found.wav&quot;)&#10;   sounds[1][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Tibial_Missing.wav&quot;)&#10;&#9;sounds[2][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Femur_found.wav&quot;)&#10;   sounds[2][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Femur_missing.wav&quot;)&#10;&#9;sounds[3][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Endeffector_Found.wav&quot;)&#10;   sounds[3][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Endeffector_Missing.wav&quot;)&#10;&#9;sounds[4][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Base_Found.wav&quot;)&#10;   sounds[4][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Base_Missing.wav&quot;)&#10;&#9;sounds[5][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Blue_Probe_Found.wav&quot;)&#10;   sounds[5][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Blue_Probe_Missing.wav&quot;)&#10;&#9;sounds[6][&quot;F&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Green_Probe_Found.wav&quot;)&#10;   sounds[6][&quot;NF&quot;] = sound.create(&quot;C:/CAREN Resources/Sounds/Green_Probe_Missing.wav&quot;)&#10;&#9;sound.setvolume(sounds[1][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[1][&quot;NF&quot;],100)&#10;&#9;sound.setvolume(sounds[2][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[2][&quot;NF&quot;],100)&#10;&#9;sound.setvolume(sounds[3][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[3][&quot;NF&quot;],100)&#10;&#9;sound.setvolume(sounds[4][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[4][&quot;NF&quot;],100)&#10;&#9;sound.setvolume(sounds[5][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[5][&quot;NF&quot;],100)&#10;&#9;sound.setvolume(sounds[6][&quot;F&quot;],100)&#10;&#9;sound.setvolume(sounds[6][&quot;NF&quot;],100)&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;init = 1&#10;end&#10;&#10;for i = 1, 6 do&#10;&#9;soundOrder[i] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;--print(i, soundOrder[i], previousSoundPlayed[i], checkNoSoundPlaying())&#10;&#9;if checkNoSoundPlaying() and &#9;previousSoundPlayed[i] ~= 1 and soundOrder[i] == 1 then&#10;&#9;&#9;sound.play(sounds[i][&quot;F&quot;])&#10;&#9;&#9;previousSoundPlayed[i] = 1&#10;&#9;elseif checkNoSoundPlaying() and &#9;previousSoundPlayed[i] ~= 2 and soundOrder[i] == 2 then&#10;&#9;&#9;sound.play(sounds[i][&quot;NF&quot;])&#10;&#9;&#9;previousSoundPlayed[i] = 2&#10;&#9;end&#10;end&#10;&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray/>
        </outputs>
      </data>
    </module>
    <module id="6" type="Script" title="Green Prob">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;function checkGreenFound()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;if&#9;(markers[i][&quot;x&quot;] == 0 and markers[i][&quot;y&quot;] == 0 and markers[i][&quot;z&quot;] == 0) or (markers[i][&quot;x&quot;] == theForbiddenNumber and markers[i][&quot;y&quot;] == theForbiddenNumber and markers[i][&quot;z&quot;] == theForbiddenNumber)&#9;then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function showMarkers()&#10;&#9;for i = 1, #markers do&#10;&#9;&#9;object.setposition(markers[i][&quot;obj&quot;],markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;--print(&quot;Marker NO. &quot;..i..&quot; CoOrdinates: &quot;, markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, #markers do&#10;&#9;&#9;object.hide(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;function printMarkers()&#10;&#9;for i = 1, #markers do&#10;&#9;&#9;print(markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;], markers[i][&quot;pos&quot;])&#10;&#9;end&#10;end&#10;function printVector(vector)&#10;&#9;print(vector[&quot;x&quot;], vector[&quot;y&quot;], vector[&quot;z&quot;])&#10;end&#10;function setMarkers()  --to number each marker in the segment&#10;&#9;--printArray(eculideanDistanceArray)&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;--print(i, (i == eculideanDistanceArray[3][2] or i == eculideanDistanceArray[3][2]) and (i == eculideanDistanceArray[2][3] or i == eculideanDistanceArray[2][2]))&#10;&#9;&#9;if (i == eculideanDistanceArray[3][2] or i == eculideanDistanceArray[3][3]) and (i == eculideanDistanceArray[2][3] or i == eculideanDistanceArray[2][2]) then&#10;&#9;&#9;&#9;markers[i][&quot;pos&quot;] = &quot;far&quot;&#10;&#9;&#9;&#9;far = markers[i]&#10;&#9;&#9;&#9;--print(&quot;far color is:&quot;, markers[i][&quot;color&quot;])&#10;&#9;&#9;elseif (i == eculideanDistanceArray[1][3] or i == eculideanDistanceArray[1][2]) and (i == eculideanDistanceArray[2][3] or i == eculideanDistanceArray[2][2]) then&#10;&#9;&#9;&#9;markers[i][&quot;pos&quot;] = &quot;left&quot;&#10;&#9;&#9;&#9;left = markers[i]&#10;&#9;&#9;&#9;--print(&quot;Left color is:&quot;, markers[i][&quot;color&quot;])&#10;&#9;&#9;elseif (i == eculideanDistanceArray[3][3] or i == eculideanDistanceArray[3][2]) and (i == eculideanDistanceArray[1][3] or i == eculideanDistanceArray[1][2]) then&#10;&#9;&#9;&#9;markers[i][&quot;pos&quot;] = &quot;right&quot;&#10;&#9;&#9;&#9;right = markers[i]&#10;&#9;&#9;&#9;--print(&quot;Right color is:&quot;, markers[i][&quot;color&quot;])&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, x do--table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;end&#10;function getAVG(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] + point2[&quot;x&quot;]) / 2.0&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] + point2[&quot;y&quot;]) / 2.0&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] + point2[&quot;z&quot;]) / 2.0&#10;&#9;return a&#10;end&#10;function getVector(point1, point2)&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = point1[&quot;x&quot;] - point2[&quot;x&quot;]&#10;&#9;vector[&quot;y&quot;] = point1[&quot;y&quot;] - point2[&quot;y&quot;]&#10;&#9;vector[&quot;z&quot;] = point1[&quot;z&quot;] - point2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getUNIVector(vector, magV)&#10;&#9;vector[&quot;x&quot;] = vector[&quot;x&quot;]/magV&#10;&#9;vector[&quot;y&quot;] = vector[&quot;y&quot;]/magV&#10;&#9;vector[&quot;z&quot;] = vector[&quot;z&quot;]/magV&#10;&#9;return vector&#10;end&#10;function crossProduct(vector1, vector2) &#10;&#9;--[[&#10;&#9;&#9;cx = aybz - azby&#10;&#9;&#9;cy = azbx - axbz&#10;&#9;&#9;cz = axby - aybx  &#10;&#9;--]]&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = vector1[&quot;y&quot;] * vector2[&quot;z&quot;] - vector1[&quot;z&quot;] * vector2[&quot;y&quot;]&#10;&#9;vector[&quot;y&quot;] = vector1[&quot;z&quot;] * vector2[&quot;x&quot;] - vector1[&quot;x&quot;] * vector2[&quot;z&quot;]&#10;&#9;vector[&quot;z&quot;] = vector1[&quot;x&quot;] * vector2[&quot;y&quot;] - vector1[&quot;y&quot;] * vector2[&quot;x&quot;]&#10;&#9;return vector&#10;end&#10;function getMagnitude(point)&#10;&#9;vector = (point[&quot;x&quot;]^2 + point[&quot;y&quot;]^2 + point[&quot;z&quot;]^2)^0.5&#10;&#9;return vector&#10;end&#10;function transform(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + aP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + aP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = bP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = cP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;obj&quot;] = markers[4][&quot;obj&quot;]&#10;&#9;tfm[&quot;pos&quot;] = &quot;fourth&quot;&#10;&#9;return tfm&#10;end&#10;function transformTranspose(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;x&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;x&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = aP[&quot;y&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = aP[&quot;z&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;obj&quot;] = markers[4][&quot;obj&quot;]&#10;&#9;tfm[&quot;pos&quot;] = &quot;fourth&quot;&#10;&#9;return tfm&#10;end&#10;function getTipLocation()&#10;&#9;localOrigin = getAVG(left, right)&#10;&#9;a = getVector(far, localOrigin)&#10;&#9;bt = getVector(left, localOrigin)&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;--printVector(localOrigin)&#10;--[[&#10;printVector(a)&#10;printVector(b)&#10;printVector(c)&#10;print(magA)&#10;print(magC)&#10;print(magB)&#10;--]]&#10;&#9;aUNI = getUNIVector(a, magA)&#10;&#9;bUNI = getUNIVector(b, magB)&#10;&#9;cUNI = getUNIVector(c, magC)&#10;&#9;markers[4] = transformTranspose(aUNI, bUNI, cUNI, fourthMarker)&#10;&#9;--markers[4] = transform(aUNI, bUNI, cUNI, fourthMarker)&#10;&#9;markers[4][&quot;x&quot;] = markers[4][&quot;x&quot;] + localOrigin[&quot;x&quot;]&#10;&#9;markers[4][&quot;y&quot;] = markers[4][&quot;y&quot;] + localOrigin[&quot;y&quot;]&#10;&#9;markers[4][&quot;z&quot;] = markers[4][&quot;z&quot;] + localOrigin[&quot;z&quot;]&#10;&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;noOfMarkers = 3&#10;theForbiddenNumber = 99999.44444&#10;markers = markers or {}&#10;markerSize = 0.05&#10;Dims = Dims or {0.05802, 0.0958, 0.10483}&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;expectedNoOfCombinations = noOfMarkers * (noOfMarkers - 1) / 2&#10;toleranceFactor = 0.001&#10;right = right or 0&#10;left = left or 0&#10;far = far or 0&#10;localOrigin = localOrigin or {}&#10;fourthMarker = {}&#10;fourthMarker[&quot;x&quot;] = 0.26825&#10;fourthMarker[&quot;y&quot;] = 0.0005&#10;fourthMarker[&quot;z&quot;] = 0.01502&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1,(noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;end&#10;&#9;markers[1] = {}&#10;&#9;markers[2] = {}&#10;&#9;markers[3] = {}&#10;&#9;markers[4] = {}&#10;&#9;markers[1][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Green&quot;)&#10;&#9;markers[1][&quot;color&quot;]=&quot;Green&quot;&#10;&#9;markers[2][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Green&quot;)&#10;&#9;markers[2][&quot;color&quot;] = &quot;Green&quot;&#10;&#9;markers[3][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Green&quot;)&#10;&#9;markers[3][&quot;color&quot;] = &quot;Green&quot;&#10;&#9;markers[4][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;White&quot;)&#10;&#9;markers[4][&quot;color&quot;] = &quot;White&quot;&#10;&#9;for i = 1, #markers do&#10;--[[&#10;&#9;&#9;markers[i] = {}&#10;&#9;&#9;markers[i][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Green&quot;)&#10;--]]&#10;&#9;&#9;node.setscaling(markers[i][&quot;obj&quot;], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#10;&#9;allOuts[1] = &quot;Green Sitiuation&quot;;&#10;&#9;allOuts[2] = &quot;Tip Location X&quot;;&#10;&#9;allOuts[3] = &quot;Tip Location Y&quot;;&#10;&#9;allOuts[4] = &quot;Tip Location Z&quot;;&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel &quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel &quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;x = 1&#10;y = 2&#10;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;if y == noOfMarkers then&#10;&#9;&#9;x = x + 1&#10;&#9;&#9;y = x + 1&#10;&#9;else&#10;&#9;&#9;y = y + 1&#10;&#9;end&#10;end&#10;eculideanDistanceArray = sortArrayAssending(eculideanDistanceArray)&#10;if checkGreenFound() then&#10;&#9;setMarkers()&#10;&#9;getTipLocation()&#10;&#9;showMarkers()&#10;&#9;--printMarkers()&#10;&#9;outputs.set(&quot;Green Sitiuation&quot;, 1)&#10;&#9;outputs.set(&quot;Tip Location X&quot;, markers[4][&quot;x&quot;])&#10;&#9;outputs.set(&quot;Tip Location Y&quot;, markers[4][&quot;y&quot;])&#10;&#9;outputs.set(&quot;Tip Location Z&quot;, markers[4][&quot;z&quot;])&#10;else&#10;&#9;hideMarkers()&#10;&#9;outputs.set(&quot;Green Sitiuation&quot;, 2)&#10;&#9;outputs.set(&quot;Tip Location X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Tip Location Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Tip Location Z&quot;, theForbiddenNumber)&#10;end&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
            <String value="Channel 7"/>
            <String value="Channel 8"/>
            <String value="Channel 9"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Green Sitiuation"/>
            <String value="Tip Location X"/>
            <String value="Tip Location Y"/>
            <String value="Tip Location Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="7" type="Phidgets" title="Phidgets">
      <data id="0">
        <PhidgetsConfig id="0" HasInterfaceKit="true" HasAccelerometer="false" HasSpatial="false" HasRFID="false" HasAnalog="false" HasRelay="false"/>
      </data>
    </module>
    <module id="8" type="Script" title="DoPins">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="function readFile(file)&#10;&#9;p = {}&#10;&#9;for line in io.lines(file) do&#10;&#9;&#9;p[&quot;x&quot;],p[&quot;y&quot;],p[&quot;z&quot;] = line:match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;end&#10;&#9;return p&#10;end&#10;function checkPointNotTaken(point, a)&#10;&#9;for i = 1, #a do&#10;&#9;&#9;if point[&quot;x&quot;] == a[i][&quot;x&quot;] and point[&quot;y&quot;] == a[i][&quot;y&quot;] and point[&quot;z&quot;] == a[i][&quot;z&quot;] then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function printArray(a, name)&#10;&#9;print(name, a[&quot;x&quot;],a[&quot;y&quot;],a[&quot;z&quot;])&#10;end&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1.x-p2.x)^2 + (p1.y-p2.y)^2 + (p1.z-p2.z)^2)&#10;end&#10;function getSUB(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] - point2[&quot;x&quot;])&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] - point2[&quot;y&quot;])&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] - point2[&quot;z&quot;])&#10;&#9;return a&#10;end&#10;function doFillingFile(set)&#10;&#9;--print(#set)&#10;&#9;filling[1] = set[1]&#10;&#9;filling[2] = set[2] --adjustment also of in and out then starting&#10;&#9;min1 = 9999&#10;&#9;min2 = 9999&#10;&#9;for j = 1, #set do&#10;&#9;&#9;distance = getEuclideanDistance(filling[2],set[j])&#10;&#9;&#9;if checkPointNotTaken(set[j], filling) then&#10;&#9;&#9;&#9;if distance ~= 0 and distance &lt; min1 then&#10;&#9;&#9;&#9;&#9;filling[3] = set[j]&#10;&#9;&#9;&#9;&#9;min1 = distance&#10;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;elseif distance ~= 0 and distance &lt; min2 then&#10;&#9;&#9;&#9;&#9;filling[4] = set[j]&#10;&#9;&#9;&#9;&#9;min2 = distance&#10;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;i = 5&#10;&#9;while i &lt; #set do&#10;&#9;&#9;min1 = 9999&#9;&#10;&#9;&#9;min2 = 9999&#10;&#9;&#9;for j = 1, #set do&#10;&#9;&#9;&#9;distance1 = getEuclideanDistance(filling[i-2],set[j])&#10;&#9;&#9;&#9;distance2 = getEuclideanDistance(filling[i-1],set[j])&#10;&#9;&#9;&#9;if checkPointNotTaken(set[j], filling) then&#10;&#9;&#9;&#9;&#9;if distance1 ~= 0 and distance1 &lt; min1 then&#10;&#9;&#9;&#9;&#9;&#9;filling[i] = set[j]&#10;&#9;&#9;&#9;&#9;&#9;min1 = distance1&#10;&#9;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;&#9;if distance2 ~= 0 and distance2 &lt; min2 then&#10;&#9;&#9;&#9;&#9;&#9;filling[i+1] = set[j]&#10;&#9;&#9;&#9;&#9;&#9;min2 = distance2&#10;&#9;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;i = i+2&#10;&#9;end&#10;&#9;---[[&#10;&#9;filling[i] = {}&#10;&#9;filling[i].x = filling[i-1].x&#10;&#9;filling[i].y = filling[i-1].y&#10;&#9;filling[i].z = 0&#10;&#9;--]]&#10;end&#10;function doPinFile(pin, pinName)&#10;&#9;a[1] = {}&#10;&#9;a[1][&quot;x&quot;] = 0&#10;&#9;a[1][&quot;y&quot;] = 0&#10;&#9;a[1][&quot;z&quot;] = 0&#10;&#9;a[2] = {}&#10;&#9;a[2].x = pin[&quot;x&quot;]&#10;&#9;a[2].y = pin[&quot;y&quot;]&#10;&#9;a[2].z = 0&#10;&#9;a[3] = {}&#10;&#9;a[3].x = pin.x&#10;&#9;a[3].y = pin.y&#10;&#9;a[3].z = pin.z&#10;&#9;a[4] = {}&#10;&#9;a[4].x = pin.x&#10;&#9;a[4].y = pin.y&#10;&#9;a[4].z = pin.z+0.005&#10;&#9;a[5] = {}&#10;&#9;a[5].x = pin.x&#10;&#9;a[5].y = pin.y&#10;&#9;a[5].z = pin.z+0.01&#10;&#9;a[6] = {}&#10;&#9;a[6].x = pin.x&#10;&#9;a[6].y = pin.y&#10;&#9;a[6].z = 0&#10;&#9;a[7] = {}&#10;&#9;a[7].x = 0&#10;&#9;a[7].y = 0&#10;&#9;a[7].z = 0&#10;&#9;return a&#10;end&#10;function saveSingleTempLocationMatrix(file, matrix)&#10;&#9;fTemp= io.output(file)&#10;&#9;fTemp:write(matrix[&quot;x&quot;],&quot;;&quot;,matrix[&quot;y&quot;],&quot;;&quot;,matrix[&quot;z&quot;],&quot;\n&quot;)&#10;&#9;fTemp:close()&#10;end&#10;function saveTempLocationMatrix(file, matrix)&#10;&#9;fTemp= io.output(file)&#10;&#9;for i = 1, #matrix do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix[i][&quot;x&quot;],&quot;;&quot;,matrix[i][&quot;y&quot;],&quot;;&quot;,matrix[i][&quot;z&quot;],&quot;\n&quot;)&#10;&#9;end&#10;&#9;if saveFile then&#10;&#9;&#9;fTemp:write(&quot;HALT&quot;)&#10;&#9;end&#10;&#9;fTemp:close()&#10;end&#10;function saveMultiLocationMatrixs(file, matrix, matrix2)&#10;&#9;fTemp= io.output(file)&#10;&#9;for i = 1, #matrix do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix[i].x,&quot;;&quot;,matrix[i].y,&quot;;&quot;,matrix[i].z,&quot;\n&quot;)&#10;&#9;end&#10;&#9;for i = 1, #matrix2 do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix2[i].x,&quot;;&quot;,matrix2[i].y,&quot;;&quot;,matrix2[i].z,&quot;\n&quot;)&#10;&#9;end&#10;&#9;if saveFile then&#10;&#9;&#9;fTemp:write(&quot;HALT&quot;)&#10;&#9;end&#10;&#9;fTemp:close()&#10;end&#10;function translation(point,dis)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + (point[&quot;x&quot;]-dis[&quot;x&quot;])&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + (point[&quot;y&quot;]-dis[&quot;y&quot;])&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + (point[&quot;z&quot;]-dis[&quot;z&quot;])&#10;&#9;return point&#10;end&#10;function getAVG(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] + point2[&quot;x&quot;]) / 2.0&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] + point2[&quot;y&quot;]) / 2.0&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] + point2[&quot;z&quot;]) / 2.0&#10;&#9;return a&#10;end&#10;function getVector(point1, point2)&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = point1[&quot;x&quot;] - point2[&quot;x&quot;]&#10;&#9;vector[&quot;y&quot;] = point1[&quot;y&quot;] - point2[&quot;y&quot;]&#10;&#9;vector[&quot;z&quot;] = point1[&quot;z&quot;] - point2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getUNIVector(vector, magV)&#10;&#9;vector[&quot;x&quot;] = vector[&quot;x&quot;]/magV&#10;&#9;vector[&quot;y&quot;] = vector[&quot;y&quot;]/magV&#10;&#9;vector[&quot;z&quot;] = vector[&quot;z&quot;]/magV&#10;&#9;return vector&#10;end&#10;function crossProduct(vector1, vector2) &#10;&#9;--[[&#10;&#9;&#9;cx = aybz - azby&#10;&#9;&#9;cy = azbx - axbz&#10;&#9;&#9;cz = axby - aybx&#10;&#9;--]]&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = vector1[&quot;y&quot;] * vector2[&quot;z&quot;] - vector1[&quot;z&quot;] * vector2[&quot;y&quot;]&#10;&#9;vector[&quot;y&quot;] = vector1[&quot;z&quot;] * vector2[&quot;x&quot;] - vector1[&quot;x&quot;] * vector2[&quot;z&quot;]&#10;&#9;vector[&quot;z&quot;] = vector1[&quot;x&quot;] * vector2[&quot;y&quot;] - vector1[&quot;y&quot;] * vector2[&quot;x&quot;]&#10;&#9;return vector&#10;end&#10;function dotProduct(v1, v2)&#10;&#9;vector = v1[&quot;x&quot;] * v2[&quot;x&quot;] + v1[&quot;y&quot;] * v2[&quot;y&quot;] + v1[&quot;z&quot;] * v2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getMagnitude(point)&#10;&#9;vector = (point[&quot;x&quot;]^2 + point[&quot;y&quot;]^2 + point[&quot;z&quot;]^2)^0.5&#10;&#9;return vector&#10;end&#10;function transform(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + aP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + aP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = bP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = cP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;return tfm&#10;end&#10;function transformTranspose(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;x&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;x&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = aP[&quot;y&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = aP[&quot;z&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;return tfm&#10;end&#10;function settingOldCoordinateFrame()&#10;&#9;localOrigin[&quot;old&quot;] = getAVG(leftPoint[&quot;old&quot;], rightPoint[&quot;old&quot;])&#10;&#9;a = getVector(rightPoint[&quot;old&quot;], localOrigin[&quot;old&quot;])&#10;&#9;bt = getVector(upperPoint[&quot;old&quot;], localOrigin[&quot;old&quot;])&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;&#9;aUNI[&quot;old&quot;] = getUNIVector(a, magA)&#10;&#9;bUNI[&quot;old&quot;] = getUNIVector(b, magB)&#10;&#9;cUNI[&quot;old&quot;] = getUNIVector(c, magC)&#10;&#9;--print(aUNI[&quot;old&quot;][&quot;x&quot;],aUNI[&quot;old&quot;][&quot;y&quot;],aUNI[&quot;old&quot;][&quot;z&quot;])&#10;&#9;--print(bUNI[&quot;old&quot;][&quot;x&quot;],bUNI[&quot;old&quot;][&quot;y&quot;],bUNI[&quot;old&quot;][&quot;z&quot;])&#10;&#9;--print(cUNI[&quot;old&quot;][&quot;x&quot;],cUNI[&quot;old&quot;][&quot;y&quot;],cUNI[&quot;old&quot;][&quot;z&quot;])&#10;end&#10;function settingNewCoordinateFrame()&#10;&#9;localOrigin[&quot;new&quot;] = getAVG(leftPoint[&quot;new&quot;], rightPoint[&quot;new&quot;])&#10;&#9;a = getVector(rightPoint[&quot;new&quot;], localOrigin[&quot;new&quot;])&#10;&#9;bt = getVector(upperPoint[&quot;new&quot;], localOrigin[&quot;new&quot;])&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;&#9;aUNI[&quot;new&quot;] = getUNIVector(a, magA)&#10;&#9;bUNI[&quot;new&quot;] = getUNIVector(b, magB)&#10;&#9;cUNI[&quot;new&quot;] = getUNIVector(c, magC)&#10;end&#10;--[[&#10;function getTransformation(point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] - localOrigin[&quot;old&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] - localOrigin[&quot;old&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] - localOrigin[&quot;old&quot;][&quot;z&quot;]&#10;&#9;point = transform(aUNI[&quot;old&quot;], bUNI[&quot;old&quot;], cUNI[&quot;old&quot;], point)&#10;&#9;point = transformTranspose(aUNI[&quot;new&quot;], bUNI[&quot;new&quot;], cUNI[&quot;new&quot;], point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + localOrigin[&quot;new&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + localOrigin[&quot;new&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + localOrigin[&quot;new&quot;][&quot;z&quot;]&#10;&#9;return point&#10;end&#10;--]]&#10;function getTransformation(point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] - localOrigin[&quot;old&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] - localOrigin[&quot;old&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] - localOrigin[&quot;old&quot;][&quot;z&quot;]&#10;&#9;point = transform(aUNI[&quot;old&quot;], bUNI[&quot;old&quot;], cUNI[&quot;old&quot;], point)&#10;---------------------------------------------------------------------------------------EL TOUCH&#10;&#9;--point.x = point.x + shifValue&#10;&#9;--point.z = point.z + inValue&#10;-----------------------------------------------------------------------------------------------&#10;&#9;point = transformTranspose(aUNI[&quot;new&quot;], bUNI[&quot;new&quot;], cUNI[&quot;new&quot;], point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + localOrigin[&quot;new&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + localOrigin[&quot;new&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + localOrigin[&quot;new&quot;][&quot;z&quot;]&#10;&#9;return point&#10;end&#10;--Variables------------------------------&#10;noOfMarkers = noOfMarkers or 0&#10;expectedNoOfCombinations = expectedNoOfCombinations or 0&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;toleranceFactor = toleranceFactor or 0&#10;theAvoidNumber = theAvoidNumber or 0&#10;aUNI = aUNI or {}&#10;bUNI = bUNI or {}&#10;cUNI = cUNI or {}&#10;localOrigin = localOrigin or {}&#10;markerSize = markerSize or 0.05&#10;allIns = allIns or {}&#10;switchScans = switchScans or 0&#10;previousFootSwitchState = previousFootSwitchState or 0.5&#10;pivotPoint = pivotPoint or {}&#10;leftPoint = leftPoint or {}&#10;rightPoint = rightPoint or {}&#10;upperPoint = upperPoint or {}&#10;upperPin = upperPin or {}&#10;lowerPin = lowerPin or {}&#10;burrTip = burrTip or {}&#10;implant = implant or {}&#10;go = go or false&#10;saveFile = saveFile or false&#10;burring = burring or {}&#10;filling = filling or {}&#10;burrUpperPin = burrUpperPin or {}&#10;burrLowerPin = burrLowerPin or {}&#10;shifValue = 0&#10;inValue = 0---0.002&#10;disableScan = false --true&#10;doPins = doPins or false&#10;doFilling = doFilling or false&#10;init = init or 0&#10;--Initialization-------------------------&#10;if init == 0 then&#10;&#9;allIns[1] = &quot;Number of Markers&quot;&#10;&#9;allIns[2] = &quot;Tolerance Factor&quot;&#10;&#9;allIns[3] = &quot;The Avoid Number&quot;&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;noOfMarkers = inputs.get(&quot;Number of Markers&quot;)&#10;&#9;toleranceFactor = inputs.get(&quot;Tolerance Factor&quot;)&#10;&#9;theAvoidNumber = inputs.get(&quot;The Avoid Number&quot;)&#10;&#9;i = 4&#10;&#9;counter = 1&#10;&#9;allIns[i] = &quot;GreenProbe Tip X&quot;&#10;&#9;allIns[i+1] = &quot;GreenProbe Tip Y&quot;&#10;&#9;allIns[i+2] = &quot;GreenProbe Tip Z&quot;&#10;&#9;i = i+3&#10;&#9;allIns[i] = &quot;Foot Switch&quot;&#10;&#9;allIns[i+1] = &quot;Green Sitiuation&quot;&#10;&#9;i = i+1&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;inFileName='C:\\CAREN Resources\\data\\Implants\\Pivot.txt'&#10;&#9;fPivotT= io.input(inFileName)&#10;&#9;pivotPoint[&quot;old&quot;] = {}&#10;&#9;pivotPoint[&quot;old&quot;][&quot;x&quot;],pivotPoint[&quot;old&quot;][&quot;y&quot;],pivotPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;--print(pivotPoint[&quot;old&quot;][&quot;x&quot;],pivotPoint[&quot;old&quot;][&quot;y&quot;],pivotPoint[&quot;old&quot;][&quot;z&quot;]) &#10;&#9;leftPoint[&quot;old&quot;] = {}&#10;&#9;leftPoint[&quot;old&quot;][&quot;x&quot;],leftPoint[&quot;old&quot;][&quot;y&quot;],leftPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;rightPoint[&quot;old&quot;] = {}&#10;&#9;rightPoint[&quot;old&quot;][&quot;x&quot;],rightPoint[&quot;old&quot;][&quot;y&quot;],rightPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;upperPoint[&quot;old&quot;] = {}&#10;&#9;upperPoint[&quot;old&quot;][&quot;x&quot;],upperPoint[&quot;old&quot;][&quot;y&quot;],upperPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;upperPin[&quot;old&quot;] = {}&#10;&#9;upperPin[&quot;old&quot;][&quot;x&quot;],upperPin[&quot;old&quot;][&quot;y&quot;],upperPin[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;lowerPin[&quot;old&quot;] = {}&#10;&#9;lowerPin[&quot;old&quot;][&quot;x&quot;],lowerPin[&quot;old&quot;][&quot;y&quot;],lowerPin[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;i = 1&#10;&#9;for line in io.lines('C:\\CAREN Resources\\Data\\Implants Modification\\Femur Implant.txt') do&#10;&#9;&#9;implant[i]= {}&#10;&#9;&#9;implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;] = line:match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;&#9;--print(i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;])&#10;&#9;&#9;i = i + 1&#10;&#9;end&#10;-------------------------------------------------------------------------------------------------REMOVE-------------------------------------------&#10;&#9;if disableScan then&#10;&#9;&#9;go = true&#10;&#9;end&#10;--------------------------------------------------------------------------------------------------------------------------------------------------&#10;&#9;init = 1&#10;end&#10;if go == false and saveFile == false and inputs.get(&quot;Foot Switch&quot;) &lt; 0.5 and inputs.get(&quot;Green Sitiuation&quot;) == 1 then&#10;&#9;if switchScans == 1 then&#10;&#9;&#9;upperPin[&quot;new&quot;] = {}&#10;&#9;&#9;upperPin[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;upperPin[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;upperPin[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 2 then&#10;&#9;&#9;lowerPin[&quot;new&quot;] = {}&#10;&#9;&#9;lowerPin[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;lowerPin[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;lowerPin[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 3 then&#10;&#9;&#9;burrTip[&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;burrTip[&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;burrTip[&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;end&#10;end&#10;if doFilling then&#10;&#9;doFillingFile(burring)&#10;&#9;saveMultiLocationMatrixs(&quot;C:\\Movements.txt&quot;, burring, filling, burrUpperPin, burrLowerPin)&#10;&#9;saveTempLocationMatrix(&quot;C:\\Filling.txt&quot;, filling)&#10;&#9;--[[&#10;&#9;for i = 1, 10 do&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\Fill&quot;..i..&quot;.txt&quot;,filling[i])&#10;&#9;end&#10;&#9;--]]&#10;&#9;doFilling = false&#10;end&#10;if doPins then&#10;&#9;burrUpperPin = doPinFile(getSUB(upperPin[&quot;new&quot;], burrTip), &quot;UpperPin&quot;)&#10;&#9;burrLowerPin = doPinFile(getSUB(lowerPin[&quot;new&quot;], burrTip), &quot;LowerPin&quot;)&#10;&#9;saveMultiLocationMatrixs(&quot;C:\\MovementsPins.txt&quot;, burrUpperPin, burrLowerPin)&#10;&#9;print(&quot;ALL DONE!&quot;)&#10;&#9;doPins = false&#10;end&#10;if go == true and saveFile == false then&#10;---------------------------------------------------------------------------------------------------------------------------------FOR_SKIPPING_SCAN_ONLY-------&#10;&#9;if disableScan then&#10;&#9;&#9;burrTip = readFile(&quot;C:\\burrTip.txt&quot;)&#10;&#9;&#9;pivotPoint[&quot;new&quot;] = readFile(&quot;C:\\pivotPoint_new.txt&quot;)&#10;&#9;&#9;rightPoint[&quot;new&quot;] = readFile(&quot;C:\\rightPoint_new.txt&quot;)&#10;&#9;&#9;leftPoint[&quot;new&quot;] = readFile(&quot;C:\\leftPoint_new.txt&quot;)&#10;&#9;&#9;upperPoint[&quot;new&quot;] = readFile(&quot;C:\\upperPoint_new.txt&quot;)&#10;&#9;&#9;upperPin[&quot;new&quot;] = readFile(&quot;C:\\upperPin.txt&quot;)&#10;&#9;&#9;lowerPin[&quot;new&quot;] = readFile(&quot;C:\\lowerPin.txt&quot;)&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\leftAdjusted.txt&quot;, getSUB(leftPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\rightAdjusted.txt&quot;, getSUB(rightPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\pivotAdjusted.txt&quot;, getSUB(pivotPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\upperAdjusted.txt&quot;, getSUB(upperPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;--[[&#10;&#9;&#9;printArray(burrTip,&quot;burrTip:&quot;)&#10;&#9;&#9;printArray(pivotPoint[&quot;new&quot;],&quot;pivotPoint:&quot;)&#10;&#9;&#9;printArray(rightPoint[&quot;new&quot;],&quot;rightPoint:&quot;)&#10;&#9;&#9;printArray(leftPoint[&quot;new&quot;],&quot;leftPoint:&quot;)&#10;&#9;&#9;printArray(upperPoint[&quot;new&quot;],&quot;upperPoint:&quot;)&#10;&#9;&#9;--]]&#10;&#9;end&#10;---------------------------------------------------------------------------------------&#10;&#9;if disableScan == false then&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\upperPin.txt&quot;, upperPin[&quot;new&quot;])&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\lowerPin.txt&quot;, lowerPin[&quot;new&quot;])&#10;&#9;end&#10;&#9;--[[&#10;&#9;settingOldCoordinateFrame()&#10;&#9;settingNewCoordinateFrame()&#10;&#9;for i = 1, #implant do&#10;&#9;&#9;implant[i] = getTransformation(implant[i])&#9;&#10;&#9;end&#10;&#9;saveTempLocationMatrix(&quot;C:\\Translated Implant.txt&quot;, implant)&#10;&#9;go = false&#10;&#9;saveFile = true&#10;&#9;--]]&#10;&#9;doPins = true&#10;end&#10;if previousFootSwitchState &lt; 0.5 and inputs.get(&quot;Foot Switch&quot;) &gt; 0.5 and inputs.get(&quot;Green Sitiuation&quot;) == 1  then&#9;&#10;&#9;switchScans = switchScans + 1&#10;&#9;if switchScans == 1 then&#10;&#9;&#9;print(&quot;Scan Upper Pin&quot;)&#10;&#9;elseif switchScans == 2 then&#10;&#9;&#9;print(&quot;Scan Lower Pin&quot;)&#10;&#9;elseif switchScans == 3 then&#10;&#9;&#9;print(&quot;Scan Burr Tip&quot;)&#10;&#9;elseif switchScans == 4 then&#10;&#9;&#9;go = true&#10;&#9;end&#10;end&#10;previousFootSwitchState = inputs.get(&quot;Foot Switch&quot;)" collisions="false">
        <inputs>
          <StringArray>
            <String value="Number of Markers"/>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="GreenProbe Tip X"/>
            <String value="GreenProbe Tip Y"/>
            <String value="GreenProbe Tip Z"/>
            <String value="Foot Switch"/>
            <String value="Green Sitiuation"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray/>
        </outputs>
      </data>
    </module>
    <module id="9" type="Script" title="DoCuttingFile">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="function readFile(file)&#10;&#9;p = {}&#10;&#9;for line in io.lines(file) do&#10;&#9;&#9;p[&quot;x&quot;],p[&quot;y&quot;],p[&quot;z&quot;] = line:match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;end&#10;&#9;return p&#10;end&#10;function checkPointNotTaken(point, a)&#10;&#9;for i = 1, #a do&#10;&#9;&#9;if point[&quot;x&quot;] == a[i][&quot;x&quot;] and point[&quot;y&quot;] == a[i][&quot;y&quot;] and point[&quot;z&quot;] == a[i][&quot;z&quot;] then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function printArray(a, name)&#10;&#9;print(name, a[&quot;x&quot;],a[&quot;y&quot;],a[&quot;z&quot;])&#10;end&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1.x-p2.x)^2 + (p1.y-p2.y)^2 + (p1.z-p2.z)^2)&#10;end&#10;function getSUB(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] - point2[&quot;x&quot;])&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] - point2[&quot;y&quot;])&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] - point2[&quot;z&quot;])&#10;&#9;return a&#10;end&#10;function doFillingFile(set)&#10;&#9;--print(#set)&#10;&#9;filling[1] = set[1]&#10;&#9;filling[2] = set[2] --adjustment also of in and out then starting&#10;&#9;min1 = 9999&#10;&#9;min2 = 9999&#10;&#9;for j = 1, #set do&#10;&#9;&#9;distance = getEuclideanDistance(filling[2],set[j])&#10;&#9;&#9;if checkPointNotTaken(set[j], filling) then&#10;&#9;&#9;&#9;if distance ~= 0 and distance &lt; min1 then&#10;&#9;&#9;&#9;&#9;filling[3] = set[j]&#10;&#9;&#9;&#9;&#9;min1 = distance&#10;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;elseif distance ~= 0 and distance &lt; min2 then&#10;&#9;&#9;&#9;&#9;filling[4] = set[j]&#10;&#9;&#9;&#9;&#9;min2 = distance&#10;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;i = 5&#10;&#9;while i &lt; #set do&#10;&#9;&#9;min1 = 9999&#9;&#10;&#9;&#9;min2 = 9999&#10;&#9;&#9;for j = 1, #set do&#10;&#9;&#9;&#9;distance1 = getEuclideanDistance(filling[i-2],set[j])&#10;&#9;&#9;&#9;distance2 = getEuclideanDistance(filling[i-1],set[j])&#10;&#9;&#9;&#9;if checkPointNotTaken(set[j], filling) then&#10;&#9;&#9;&#9;&#9;if distance1 ~= 0 and distance1 &lt; min1 then&#10;&#9;&#9;&#9;&#9;&#9;filling[i] = set[j]&#10;&#9;&#9;&#9;&#9;&#9;min1 = distance1&#10;&#9;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;&#9;if distance2 ~= 0 and distance2 &lt; min2 then&#10;&#9;&#9;&#9;&#9;&#9;filling[i+1] = set[j]&#10;&#9;&#9;&#9;&#9;&#9;min2 = distance2&#10;&#9;&#9;&#9;&#9;&#9;--print(token, i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;],&quot;Dis:&quot;, distance)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;i = i+2&#10;&#9;end&#10;&#9;---[[&#10;&#9;filling[i] = {}&#10;&#9;filling[i].x = filling[i-1].x&#10;&#9;filling[i].y = filling[i-1].y&#10;&#9;filling[i].z = 0&#10;&#9;--]]&#10;end&#10;function saveSingleTempLocationMatrix(file, matrix)&#10;&#9;fTemp= io.output(file)&#10;&#9;fTemp:write(matrix[&quot;x&quot;],&quot;;&quot;,matrix[&quot;y&quot;],&quot;;&quot;,matrix[&quot;z&quot;],&quot;\n&quot;)&#10;&#9;fTemp:close()&#10;end&#10;function saveTempLocationMatrix(file, matrix)&#10;&#9;fTemp= io.output(file)&#10;&#9;for i = 1, #matrix do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix[i][&quot;x&quot;],&quot;;&quot;,matrix[i][&quot;y&quot;],&quot;;&quot;,matrix[i][&quot;z&quot;],&quot;\n&quot;)&#10;&#9;end&#10;&#9;if saveFile then&#10;&#9;&#9;fTemp:write(&quot;HALT&quot;)&#10;&#9;end&#10;&#9;fTemp:close()&#10;end&#10;function saveMultiLocationMatrixs(file, matrix, matrix2)&#10;&#9;fTemp= io.output(file)&#10;&#9;for i = 1, #matrix do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix[i].x,&quot;;&quot;,matrix[i].y,&quot;;&quot;,matrix[i].z,&quot;\n&quot;)&#10;&#9;end&#10;&#9;for i = 1, #matrix2 do&#10;&#9;&#9;--print(matrix[i][&quot;x&quot;])&#10;&#9;&#9;fTemp:write(matrix2[i].x,&quot;;&quot;,matrix2[i].y,&quot;;&quot;,matrix2[i].z,&quot;\n&quot;)&#10;&#9;end&#10;&#9;if saveFile then&#10;&#9;&#9;fTemp:write(&quot;HALT&quot;)&#10;&#9;end&#10;&#9;fTemp:close()&#10;end&#10;function translation(point,dis)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + (point[&quot;x&quot;]-dis[&quot;x&quot;])&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + (point[&quot;y&quot;]-dis[&quot;y&quot;])&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + (point[&quot;z&quot;]-dis[&quot;z&quot;])&#10;&#9;return point&#10;end&#10;function getAVG(point1, point2)&#10;&#9;a = {}&#10;&#9;a[&quot;x&quot;] = (point1[&quot;x&quot;] + point2[&quot;x&quot;]) / 2.0&#10;&#9;a[&quot;y&quot;] = (point1[&quot;y&quot;] + point2[&quot;y&quot;]) / 2.0&#10;&#9;a[&quot;z&quot;] = (point1[&quot;z&quot;] + point2[&quot;z&quot;]) / 2.0&#10;&#9;return a&#10;end&#10;function getVector(point1, point2)&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = point1[&quot;x&quot;] - point2[&quot;x&quot;]&#10;&#9;vector[&quot;y&quot;] = point1[&quot;y&quot;] - point2[&quot;y&quot;]&#10;&#9;vector[&quot;z&quot;] = point1[&quot;z&quot;] - point2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getUNIVector(vector, magV)&#10;&#9;vector[&quot;x&quot;] = vector[&quot;x&quot;]/magV&#10;&#9;vector[&quot;y&quot;] = vector[&quot;y&quot;]/magV&#10;&#9;vector[&quot;z&quot;] = vector[&quot;z&quot;]/magV&#10;&#9;return vector&#10;end&#10;function crossProduct(vector1, vector2) &#10;&#9;--[[&#10;&#9;&#9;cx = aybz - azby&#10;&#9;&#9;cy = azbx - axbz&#10;&#9;&#9;cz = axby - aybx&#10;&#9;--]]&#10;&#9;vector = {}&#10;&#9;vector[&quot;x&quot;] = vector1[&quot;y&quot;] * vector2[&quot;z&quot;] - vector1[&quot;z&quot;] * vector2[&quot;y&quot;]&#10;&#9;vector[&quot;y&quot;] = vector1[&quot;z&quot;] * vector2[&quot;x&quot;] - vector1[&quot;x&quot;] * vector2[&quot;z&quot;]&#10;&#9;vector[&quot;z&quot;] = vector1[&quot;x&quot;] * vector2[&quot;y&quot;] - vector1[&quot;y&quot;] * vector2[&quot;x&quot;]&#10;&#9;return vector&#10;end&#10;function dotProduct(v1, v2)&#10;&#9;vector = v1[&quot;x&quot;] * v2[&quot;x&quot;] + v1[&quot;y&quot;] * v2[&quot;y&quot;] + v1[&quot;z&quot;] * v2[&quot;z&quot;]&#10;&#9;return vector&#10;end&#10;function getMagnitude(point)&#10;&#9;vector = (point[&quot;x&quot;]^2 + point[&quot;y&quot;]^2 + point[&quot;z&quot;]^2)^0.5&#10;&#9;return vector&#10;end&#10;function transform(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + aP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + aP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = bP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = cP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;return tfm&#10;end&#10;function transformTranspose(aP, bP, cP, fourthMarker)&#10;&#9;tfm = {}&#10;&#9;tfm[&quot;x&quot;] = aP[&quot;x&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;x&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;x&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;y&quot;] = aP[&quot;y&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;y&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;y&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;tfm[&quot;z&quot;] = aP[&quot;z&quot;] * fourthMarker[&quot;x&quot;] + bP[&quot;z&quot;] * fourthMarker[&quot;y&quot;] + cP[&quot;z&quot;] * fourthMarker[&quot;z&quot;]&#10;&#9;return tfm&#10;end&#10;function settingOldCoordinateFrame()&#10;&#9;localOrigin[&quot;old&quot;] = getAVG(leftPoint[&quot;old&quot;], rightPoint[&quot;old&quot;])&#10;&#9;a = getVector(rightPoint[&quot;old&quot;], localOrigin[&quot;old&quot;])&#10;&#9;bt = getVector(upperPoint[&quot;old&quot;], localOrigin[&quot;old&quot;])&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;&#9;aUNI[&quot;old&quot;] = getUNIVector(a, magA)&#10;&#9;bUNI[&quot;old&quot;] = getUNIVector(b, magB)&#10;&#9;cUNI[&quot;old&quot;] = getUNIVector(c, magC)&#10;&#9;--print(aUNI[&quot;old&quot;][&quot;x&quot;],aUNI[&quot;old&quot;][&quot;y&quot;],aUNI[&quot;old&quot;][&quot;z&quot;])&#10;&#9;--print(bUNI[&quot;old&quot;][&quot;x&quot;],bUNI[&quot;old&quot;][&quot;y&quot;],bUNI[&quot;old&quot;][&quot;z&quot;])&#10;&#9;--print(cUNI[&quot;old&quot;][&quot;x&quot;],cUNI[&quot;old&quot;][&quot;y&quot;],cUNI[&quot;old&quot;][&quot;z&quot;])&#10;end&#10;function settingNewCoordinateFrame()&#10;&#9;localOrigin[&quot;new&quot;] = getAVG(leftPoint[&quot;new&quot;], rightPoint[&quot;new&quot;])&#10;&#9;a = getVector(rightPoint[&quot;new&quot;], localOrigin[&quot;new&quot;])&#10;&#9;bt = getVector(upperPoint[&quot;new&quot;], localOrigin[&quot;new&quot;])&#10;&#9;c = crossProduct(a, bt)&#10;&#9;b = crossProduct(a, c)&#10;&#9;magA = getMagnitude(a)&#10;&#9;magB = getMagnitude(b)&#10;&#9;magC = getMagnitude(c)&#10;&#9;aUNI[&quot;new&quot;] = getUNIVector(a, magA)&#10;&#9;bUNI[&quot;new&quot;] = getUNIVector(b, magB)&#10;&#9;cUNI[&quot;new&quot;] = getUNIVector(c, magC)&#10;end&#10;--[[&#10;function getTransformation(point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] - localOrigin[&quot;old&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] - localOrigin[&quot;old&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] - localOrigin[&quot;old&quot;][&quot;z&quot;]&#10;&#9;point = transform(aUNI[&quot;old&quot;], bUNI[&quot;old&quot;], cUNI[&quot;old&quot;], point)&#10;&#9;point = transformTranspose(aUNI[&quot;new&quot;], bUNI[&quot;new&quot;], cUNI[&quot;new&quot;], point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + localOrigin[&quot;new&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + localOrigin[&quot;new&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + localOrigin[&quot;new&quot;][&quot;z&quot;]&#10;&#9;return point&#10;end&#10;--]]&#10;function getTransformation(point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] - localOrigin[&quot;old&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] - localOrigin[&quot;old&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] - localOrigin[&quot;old&quot;][&quot;z&quot;]&#10;&#9;point = transform(aUNI[&quot;old&quot;], bUNI[&quot;old&quot;], cUNI[&quot;old&quot;], point)&#10;---[[&#10;---------------------------------------------------------------------------------------EL TOUCH&#10;-------------------------------------------------------- (-25) around Z&#10;&#9;--point.x = point.x*0.9063077 - point.y*0.422618&#10;&#9;--point.y = point.x*0.422618 + point.y*0.9063077&#10;-------------------------------------------------------- (-5) around X&#10;&#9;point.y = point.y*0.99619 - point.z*0.0871557&#10;&#9;point.z = point.y*0.0871557 + point.z*0.99619&#10;-----------------------------------------------------------------------------------&#10;--]]&#10;&#9;point.x = point.x - 0.003 + shifValue&#10;&#9;--point.y = point.y + 0.005&#10;&#9;--point.z = point.z + 0.01&#10;-----------------------------------------------------------------------------------------------&#10;&#9;point = transformTranspose(aUNI[&quot;new&quot;], bUNI[&quot;new&quot;], cUNI[&quot;new&quot;], point)&#10;&#9;point[&quot;x&quot;] = point[&quot;x&quot;] + localOrigin[&quot;new&quot;][&quot;x&quot;]&#10;&#9;point[&quot;y&quot;] = point[&quot;y&quot;] + localOrigin[&quot;new&quot;][&quot;y&quot;]&#10;&#9;point[&quot;z&quot;] = point[&quot;z&quot;] + localOrigin[&quot;new&quot;][&quot;z&quot;]&#10;&#9;return point&#10;end&#10;function doRotation(point)&#10;-------------------------------------------------------- (-25) around Z&#10;&#9;point.x = point.x*0.9063077 - point.y*0.422618&#10;&#9;point.y = point.x*0.422618 + point.y*0.9063077&#10;-------------------------------------------------------- (-15) around X&#10;&#9;point.y = point.y*0.9659258 - point.z*0.258819&#10;&#9;point.z = 1*point.y*0.258819 + point.z*0.9659258&#10;&#9;return point&#10;end&#10;--Variables------------------------------&#10;noOfMarkers = noOfMarkers or 0&#10;expectedNoOfCombinations = expectedNoOfCombinations or 0&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;toleranceFactor = toleranceFactor or 0&#10;theAvoidNumber = theAvoidNumber or 0&#10;aUNI = aUNI or {}&#10;bUNI = bUNI or {}&#10;cUNI = cUNI or {}&#10;localOrigin = localOrigin or {}&#10;markerSize = markerSize or 0.05&#10;allIns = allIns or {}&#10;switchScans = switchScans or 0&#10;previousFootSwitchState = previousFootSwitchState or 0.5&#10;pivotPoint = pivotPoint or {}&#10;leftPoint = leftPoint or {}&#10;rightPoint = rightPoint or {}&#10;upperPoint = upperPoint or {}&#10;upperPin = upperPin or {}&#10;lowerPin = lowerPin or {}&#10;burrTip = burrTip or {}&#10;implant = implant or {}&#10;go = go or false&#10;saveFile = saveFile or false&#10;burring = burring or {}&#10;filling = filling or {}&#10;burrUpperPin = burrUpperPin or {}&#10;burrLowerPin = burrLowerPin or {}&#10;shifValue = 0.006&#10;inValue = 0---0.002&#10;disableScan = true --true&#10;doPins = doPins or false&#10;doFilling = doFilling or false&#10;seta = 25&#10;init = init or 0&#10;--Initialization-------------------------&#10;if init == 0 then&#10;&#9;allIns[1] = &quot;Number of Markers&quot;&#10;&#9;allIns[2] = &quot;Tolerance Factor&quot;&#10;&#9;allIns[3] = &quot;The Avoid Number&quot;&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;noOfMarkers = inputs.get(&quot;Number of Markers&quot;)&#10;&#9;toleranceFactor = inputs.get(&quot;Tolerance Factor&quot;)&#10;&#9;theAvoidNumber = inputs.get(&quot;The Avoid Number&quot;)&#10;&#9;i = 4&#10;&#9;counter = 1&#10;&#9;allIns[i] = &quot;GreenProbe Tip X&quot;&#10;&#9;allIns[i+1] = &quot;GreenProbe Tip Y&quot;&#10;&#9;allIns[i+2] = &quot;GreenProbe Tip Z&quot;&#10;&#9;i = i+3&#10;&#9;allIns[i] = &quot;Foot Switch&quot;&#10;&#9;allIns[i+1] = &quot;Green Sitiuation&quot;&#10;&#9;i = i+1&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;inFileName='C:\\CAREN Resources\\data\\Implants\\Tibial Pivot.txt'&#10;&#9;fPivotT= io.input(inFileName)&#10;&#9;pivotPoint[&quot;old&quot;] = {}&#10;&#9;pivotPoint[&quot;old&quot;][&quot;x&quot;],pivotPoint[&quot;old&quot;][&quot;y&quot;],pivotPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;--print(pivotPoint[&quot;old&quot;][&quot;x&quot;],pivotPoint[&quot;old&quot;][&quot;y&quot;],pivotPoint[&quot;old&quot;][&quot;z&quot;]) &#10;&#9;leftPoint[&quot;old&quot;] = {}&#10;&#9;leftPoint[&quot;old&quot;][&quot;x&quot;],leftPoint[&quot;old&quot;][&quot;y&quot;],leftPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;rightPoint[&quot;old&quot;] = {}&#10;&#9;rightPoint[&quot;old&quot;][&quot;x&quot;],rightPoint[&quot;old&quot;][&quot;y&quot;],rightPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;upperPoint[&quot;old&quot;] = {}&#10;&#9;upperPoint[&quot;old&quot;][&quot;x&quot;],upperPoint[&quot;old&quot;][&quot;y&quot;],upperPoint[&quot;old&quot;][&quot;z&quot;] = fPivotT:read(&quot;*l&quot;):match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;i = 1&#10;&#9;for line in io.lines('C:\\CAREN Resources\\Data\\Implants Modification\\Tibial Implant.txt') do&#10;&#9;&#9;implant[i]= {}&#10;&#9;&#9;implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;] = line:match(&quot;(.+);(.+);(.+)&quot;)&#10;&#9;&#9;--print(i, implant[i][&quot;x&quot;],implant[i][&quot;y&quot;],implant[i][&quot;z&quot;])&#10;&#9;&#9;i = i + 1&#10;&#9;end&#10;-------------------------------------------------------------------------------------------------REMOVE-------------------------------------------&#10;&#9;if disableScan then&#10;&#9;&#9;go = true&#10;&#9;end&#10;--------------------------------------------------------------------------------------------------------------------------------------------------&#10;&#9;init = 1&#10;end&#10;--[[&#10;e = {}--0.14082781934855;0.11734948748363;0.36507973243931&#10;&#10;e.x = 0.14082781934855 &#10;e.y = 0.11734948748363 &#10;e.z = 0.36507973243931&#10;d = {}--0.13692215708201;0.1505997794514;0.37571616632271&#10;d.x = 0.13692215708201&#10;d.y = 0.1505997794514  &#10;d.z = 0.37571616632271&#10;c = {}&#10;c.x = 0.073095  &#10;c.y = 0.075285  &#10;c.z = 0.730949&#10;b = {}&#10;b.x = 0.070850&#10;b.y = 0.111237  &#10;b.z = 0.714651&#10;&#10;print(&quot;-----------------------------------------------&quot;)&#10;print(&quot;eq1:&quot;,getEuclideanDistance(e,d))&#10;print(&quot;eq2:&quot;,getEuclideanDistance(b,c))&#10;--]]&#10;--print(&quot;-----&gt;&quot;,implant[1][&quot;x&quot;],implant[1][&quot;y&quot;],implant[1][&quot;z&quot;])&#9;&#10;--print(go,saveFile,inputs.get(&quot;Foot Switch&quot;) &lt; 0.5 , inputs.get(&quot;Green Sitiuation&quot;))&#10;if go == false and saveFile == false and inputs.get(&quot;Foot Switch&quot;) &lt; 0.5 and inputs.get(&quot;Green Sitiuation&quot;) == 1 then&#10;&#9;--print(switchScans)&#10;&#9;if switchScans == 1 then&#10;&#9;&#9;pivotPoint[&quot;new&quot;] = {}&#10;&#9;&#9;pivotPoint[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;pivotPoint[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;pivotPoint[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 2 then&#10;&#9;&#9;leftPoint[&quot;new&quot;] = {}&#10;&#9;&#9;leftPoint[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;leftPoint[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;leftPoint[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 3 then&#10;&#9;&#9;rightPoint[&quot;new&quot;] = {}&#10;&#9;&#9;rightPoint[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;rightPoint[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;rightPoint[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 4 then&#10;&#9;&#9;upperPoint[&quot;new&quot;] = {}&#10;&#9;&#9;upperPoint[&quot;new&quot;][&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;upperPoint[&quot;new&quot;][&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;upperPoint[&quot;new&quot;][&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;elseif switchScans == 5 then&#10;&#9;&#9;burrTip[&quot;x&quot;] = inputs.get(&quot;GreenProbe Tip X&quot;)&#10;&#9;&#9;burrTip[&quot;y&quot;] = inputs.get(&quot;GreenProbe Tip Y&quot;)&#10;&#9;&#9;burrTip[&quot;z&quot;] = inputs.get(&quot;GreenProbe Tip Z&quot;)&#10;&#9;end&#10;end&#10;if doFilling then&#10;&#9;print(&quot;Doing Filling&quot;)&#10;&#9;doFillingFile(burring)&#10;&#9;saveMultiLocationMatrixs(&quot;C:\\Movements.txt&quot;, filling, burring)&#10;&#9;saveTempLocationMatrix(&quot;C:\\Filling.txt&quot;, filling)&#10;&#9;--[[&#10;&#9;for i = 1, 10 do&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\Fill&quot;..i..&quot;.txt&quot;,filling[i])&#10;&#9;end&#10;&#9;--]]&#10;&#9;print(&quot;ALL DONE!&quot;)&#10;&#9;doFilling = false&#10;end&#10;if saveFile then&#10;&#9;print(&quot;ScaveFile&quot;)&#10;&#9;temp = getSUB(implant[1], burrTip)&#10;&#9;burring[1] = {}&#10;&#9;burring[1].x = temp.x&#10;&#9;burring[1].y = temp.y&#10;&#9;burring[1].z = 0&#10;&#9;burring[2] = {}&#10;&#9;burring[2].x = temp.x&#10;&#9;burring[2].y = temp.y&#10;&#9;burring[2].z = temp.z&#10;&#9;for i = 3, #implant+1 do&#10;&#9;&#9;n = getSUB(implant[i-1], burrTip)&#10;&#9;&#9;--print(&quot;BEFORE:&quot;, n.x, n.y, n.z)&#10;&#9;&#9;a.x = (math.floor(100000*n.x)/100000)&#10;&#9;&#9;a.y = (math.floor(100000*n.y)/100000)&#10;&#9;&#9;a.z = (math.floor(100000*n.z)/100000)&#9;&#10;&#9;&#9;--print(&quot;AFTER:&quot;, a.x, a.y, a.z)&#10;&#9;&#9;burring[i] = a&#10;&#9;&#9;--burring[i] = n&#10;&#9;&#9;--burring[i] = doRotation(getSUB(implant[i-1], burrTip))&#10;&#9;&#9;if math.abs(burring[i][&quot;x&quot;]) &lt;0.0001 then&#10;&#9;&#9;&#9;burring[i][&quot;x&quot;] = 0&#10;&#9;&#9;end&#10;&#9;&#9;if math.abs(burring[i][&quot;y&quot;]) &lt;0.0001 then&#10;&#9;&#9;&#9;burring[i][&quot;y&quot;] = 0&#10;&#9;&#9;end&#10;&#9;&#9;if math.abs(burring[i][&quot;z&quot;]) &lt;0.0001 then&#10;&#9;&#9;&#9;burring[i][&quot;z&quot;] = 0&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;burring[#implant+2] = {}&#10;&#9;burring[#implant+2].x = burring[#implant+1].x&#10;&#9;burring[#implant+2].y = burring[#implant+1].y&#10;&#9;burring[#implant+2].z = 0&#10;&#9;burring[#implant+3] = {}&#10;&#9;burring[#implant+3].x = 0&#10;&#9;burring[#implant+3].y = 0&#10;&#9;burring[#implant+3].z = 0&#10;&#10;&#9;saveTempLocationMatrix(&quot;C:\\burring.txt&quot;, burring)&#10;&#9;saveFile = false&#10;&#9;--doPins = true&#10;&#9;--doFilling = true&#10;end&#10;&#10;if go == true and saveFile == false then&#10;&#9;print(&quot;Doing go&quot;)&#10;---------------------------------------------------------------------------------------------------------------------------------FOR_SKIPPING_SCAN_ONLY-------&#10;&#9;if disableScan then&#10;&#9;&#9;burrTip = readFile(&quot;C:\\burrTip.txt&quot;)&#10;&#9;&#9;pivotPoint[&quot;new&quot;] = readFile(&quot;C:\\pivotPoint_new.txt&quot;)&#10;&#9;&#9;rightPoint[&quot;new&quot;] = readFile(&quot;C:\\rightPoint_new.txt&quot;)&#10;&#9;&#9;leftPoint[&quot;new&quot;] = readFile(&quot;C:\\leftPoint_new.txt&quot;)&#10;&#9;&#9;upperPoint[&quot;new&quot;] = readFile(&quot;C:\\upperPoint_new.txt&quot;)&#10;&#9;&#9;--[[&#10;&#9;&#9;printArray(burrTip,&quot;burrTip:&quot;)&#10;&#9;&#9;printArray(pivotPoint[&quot;new&quot;],&quot;pivotPoint:&quot;)&#10;&#9;&#9;printArray(rightPoint[&quot;new&quot;],&quot;rightPoint:&quot;)&#10;&#9;&#9;printArray(leftPoint[&quot;new&quot;],&quot;leftPoint:&quot;)&#10;&#9;&#9;printArray(upperPoint[&quot;new&quot;],&quot;upperPoint:&quot;)&#10;&#9;&#9;--]]&#10;&#9;end&#10;---------------------------------------------------------------------------------------&#10;&#9;if disableScan == false then&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\pivotPoint_new.txt&quot;, pivotPoint[&quot;new&quot;])&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\leftPoint_new.txt&quot;, leftPoint[&quot;new&quot;])&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\rightPoint_new.txt&quot;, rightPoint[&quot;new&quot;])&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\upperPoint_new.txt&quot;, upperPoint[&quot;new&quot;])&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\burrTip.txt&quot;, burrTip)&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\leftAdjusted.txt&quot;, getSUB(leftPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\rightAdjusted.txt&quot;, getSUB(rightPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\pivotAdjusted.txt&quot;, getSUB(pivotPoint[&quot;new&quot;], burrTip))&#10;&#9;&#9;saveSingleTempLocationMatrix(&quot;C:\\upperAdjusted.txt&quot;, getSUB(upperPoint[&quot;new&quot;], burrTip))&#10;&#9;end&#10;&#9;settingOldCoordinateFrame()&#10;&#9;settingNewCoordinateFrame()&#10;&#9;for i = 1, #implant do&#10;&#9;&#9;implant[i] = getTransformation(implant[i])&#9;&#10;&#9;end&#10;&#9;saveTempLocationMatrix(&quot;C:\\Translated Implant.txt&quot;, implant)&#10;&#9;go = false&#10;&#9;saveFile = true&#10;end&#10;if previousFootSwitchState &lt; 0.5 and inputs.get(&quot;Foot Switch&quot;) &gt; 0.5 and inputs.get(&quot;Green Sitiuation&quot;) == 1  then&#9;&#10;&#9;switchScans = switchScans + 1&#10;&#9;if switchScans == 1 then&#10;&#9;&#9;print(&quot;Scan Pivot&quot;)&#10;&#9;elseif switchScans == 2 then&#10;&#9;&#9;print(&quot;Scan Left&quot;)&#10;&#9;elseif switchScans == 3 then&#10;&#9;&#9;print(&quot;Scan Right&quot;)&#10;&#9;elseif switchScans == 4 then&#10;&#9;&#9;print(&quot;Scan Upper&quot;)&#10;&#9;elseif switchScans == 5 then&#10;&#9;&#9;print(&quot;Scan Burr Tip&quot;)&#10;&#9;elseif switchScans == 6 then&#10;&#9;&#9;go = true&#10;&#9;end&#10;end&#10;previousFootSwitchState = inputs.get(&quot;Foot Switch&quot;)" collisions="false">
        <inputs>
          <StringArray>
            <String value="Number of Markers"/>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="GreenProbe Tip X"/>
            <String value="GreenProbe Tip Y"/>
            <String value="GreenProbe Tip Z"/>
            <String value="Foot Switch"/>
            <String value="Green Sitiuation"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray/>
        </outputs>
      </data>
    </module>
    <module id="10" type="Script" title="Clustering Femur">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--Functions------------------------------&#10;function showMarkers()&#10;&#9;for i = 1, #drawMarkers do&#10;&#9;&#9;object.setposition(drawMarkers[i],femoralArray[i][&quot;x&quot;], femoralArray[i][&quot;y&quot;], femoralArray[i][&quot;z&quot;])&#10;&#9;&#9;--print(&quot;Marker NO. &quot;..i..&quot; CoOrdinates: &quot;, markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(drawMarkers[i])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, #drawMarkers do&#10;&#9;&#9;object.hide(drawMarkers[i])&#10;&#9;end&#10;end&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;end&#10;&#10;function printMarkersArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][&quot;x&quot;], A[i][&quot;y&quot;], A[i][&quot;z&quot;])&#10;&#9;end&#10;end&#10;&#10;function printSimpleArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i])&#10;&#9;end&#10;end&#10;function countMarkers(foundMarkers, number)&#10;&#9;found = false&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Value&quot;] == number then&#10;&#9;&#9;&#9;foundMarkers[i][&quot;Count&quot;] = foundMarkers[i][&quot;Count&quot;] + 1&#10;&#9;&#9;&#9;found = true&#10;&#9;&#9;&#9;return foundMarkers&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if found == false then&#10;&#9;&#9;c = (#foundMarkers)+1&#10;&#9;&#9;foundMarkers[c] = {}&#10;&#9;&#9;foundMarkers[c][&quot;Value&quot;] = number&#10;&#9;&#9;foundMarkers[c][&quot;Count&quot;] = 1&#10;&#9;end&#10;&#9;return foundMarkers&#10;end&#10;function&#9;doubleCheck()&#10;&#9;foundMarkers = {}&#10;&#9;foundMarkers[1] = {}&#10;&#9;foundMarkers[2] = {}&#10;&#9;foundMarkers[1][&quot;Value&quot;] = femoralArray[1][2]&#10;&#9;foundMarkers[1][&quot;Count&quot;] = 1&#10;&#9;foundMarkers[2][&quot;Value&quot;] = femoralArray[1][3]&#10;&#9;foundMarkers[2][&quot;Count&quot;] = 1&#10;&#9;for i = 2, #femoralArray do&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, femoralArray[i][2])&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, femoralArray[i][3])&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;temp = {}&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Count&quot;] &gt; 2 then&#10;&#9;&#9;&#9;temp[counter] = markers[foundMarkers[i][&quot;Value&quot;]]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if #temp == 4 then&#10;&#9;&#9;femoralArray = temp&#10;&#9;&#9;return true&#10;&#9;end&#10;&#9;return false&#10;end&#10;function findFemoralArray(A, tF, itrationNumber)&#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= FemoralArrayDims[1]-tF and A[i][1] &lt;= FemoralArrayDims[1]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[2]-tF and A[i][1] &lt;= FemoralArrayDims[2]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[3]-tF and A[i][1] &lt;= FemoralArrayDims[3]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[4]-tF and A[i][1] &lt;= FemoralArrayDims[4]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[5]-tF and A[i][1] &lt;= FemoralArrayDims[5]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[6]-tF and A[i][1] &lt;= FemoralArrayDims[6]+tF then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;&#9;--print(&quot;found &quot;, counter)&#10;&#9;end&#10;&#9;if counter &lt; 7 then&#10;&#9;&#9;femoralArray = {}&#10;&#9;&#9;--print(&quot;Nah!&quot;)&#10;&#9;elseif doubleCheck() then&#10;&#9;&#9;return &quot;found&quot;&#10;&#9;elseif itrationNumber &lt; maxNoItrations then&#10;&#9;&#9;return findFemoralArray(A, tF - 0.0001, itrationNumber + 1)&#10;&#9;end&#10;&#9;femoralArray = {}&#10;&#9;--print(&quot;not Found!&quot;)&#10;&#9;return &quot;not found&quot;&#10;end&#10;--Variables------------------------------&#10;noOfMarkers = noOfMarkers or 0&#10;toleranceFactor = toleranceFactor or 0&#10;theAvoidNumber = theAvoidNumber or 0&#10;femoralArray = femoralArray or {}&#10;FemoralArrayDims = FemoralArrayDims or {}&#10;expectedNoOfCombinations = expectedNoOfCombinations or 0&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;maxNoItrations = maxNoItrations or 20&#10;drawMarkers = drawMarkers or {}&#10;markerSize = markerSize or 0.05&#10;allIns = allIns or {}&#10;allOuts = allOuts or {}&#10;markers = markers or {}&#10;sitiuation = sitiuation or &quot;not found&quot;&#10;init = init or 0&#10;--Initialization-------------------------&#10;if init == 0 then&#10;&#9;for i = 1, 4 do&#10;&#9;&#9;drawMarkers[i]=object.create(&quot;Sphere&quot;,&quot;Red&quot;)&#10;&#9;&#9;node.setscaling(drawMarkers[i], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#9;allIns[1] = &quot;Number of Markers&quot;&#10;&#9;allIns[2] = &quot;Tolerance Factor&quot;&#10;&#9;allIns[3] = &quot;The Avoid Number&quot;&#10;&#9;for i = 4, 9 do&#10;&#9;&#9;allIns[i] = &quot;FemoralArrayDims &quot;..i-3&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;noOfMarkers = inputs.get(&quot;Number of Markers&quot;)&#10;&#9;toleranceFactor = inputs.get(&quot;Tolerance Factor&quot;)&#10;&#9;theAvoidNumber = inputs.get(&quot;The Avoid Number&quot;)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;FemoralArrayDims[i] = inputs.get(&quot;FemoralArrayDims &quot;..i)&#10;&#9;end&#10;&#9;for i = 10, 9 + noOfMarkers*3 do&#10;&#9;&#9;allIns[i] = &quot;Channel&quot;..i-9&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;counter = 1&#10;&#9;i = 1&#10;&#9;while i &lt; (4 * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Femoral Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Femoral Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Femoral Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;allOuts[i] = &quot;Sitiuation&quot;&#10;&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;--Processing-----------------------------&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j] = {}&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel&quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel&quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel&quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;expectedNoOfCombinations = noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;x = 1&#10;y = 2&#10;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;if y == noOfMarkers then&#10;&#9;&#9;x = x+1&#10;&#9;&#9;y = x+1&#10;&#9;else&#10;&#9;&#9;y = y+1&#10;&#9;end&#10;end&#10;eculideanDistanceArray = sortArrayAssending(eculideanDistanceArray)&#10;--printArray(eculideanDistanceArray)&#10;sitiuation = findFemoralArray(eculideanDistanceArray, toleranceFactor, 1)&#10;printMarkersArray(femoralArray)&#10;&#10;for i = 1, (table.getn(femoralArray)) do&#10;&#9;if femoralArray[i] ~= nil then&#10;&#9;&#9;if femoralArray[i][&quot;x&quot;] ~= nil or femoralArray[i][&quot;y&quot;] ~= nil or femoralArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; X&quot;, femoralArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Y&quot;, femoralArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Z&quot;, femoralArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; X&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Y&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Z&quot;, theAvoidNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;print(i)&#10;end&#10;if sitiuation == &quot;found&quot; then&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 1)&#10;&#9;showMarkers()&#10;else&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 2)&#10;&#9;hideMarkers()&#10;end" collisions="false">
        <inputs>
          <StringArray>
            <String value="Number of Markers"/>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="FemoralArrayDims 1"/>
            <String value="FemoralArrayDims 2"/>
            <String value="FemoralArrayDims 3"/>
            <String value="FemoralArrayDims 4"/>
            <String value="FemoralArrayDims 5"/>
            <String value="FemoralArrayDims 6"/>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Femoral Array 1 X"/>
            <String value="Femoral Array 1 Y"/>
            <String value="Femoral Array 1 Z"/>
            <String value="Femoral Array 2 X"/>
            <String value="Femoral Array 2 Y"/>
            <String value="Femoral Array 2 Z"/>
            <String value="Femoral Array 3 X"/>
            <String value="Femoral Array 3 Y"/>
            <String value="Femoral Array 3 Z"/>
            <String value="Femoral Array 4 X"/>
            <String value="Femoral Array 4 Y"/>
            <String value="Femoral Array 4 Z"/>
            <String value="Sitiuation"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="11" type="Script" title="Femur">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, x do--table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;end&#10;--Calibrating&#10;function getTheCenter(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= 0.104954-toleranceFactor and A[i][1] &lt;= 0.104954+toleranceFactor then&#10;&#9;&#9;&#9;theCenter[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;theCenter[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;theCenter[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;elseif A[i][1] &gt;= 0.05504487-toleranceFactor and A[i][1] &lt;= 0.05504487+toleranceFactor then&#10;&#9;&#9;&#9;virtualX[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;virtualX[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;virtualX[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;elseif A[i][1] &gt;= 0.0858231-toleranceFactor and A[i][1] &lt;= 0.0858231+toleranceFactor then&#10;&#9;&#9;&#9;virtualY[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;virtualY[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;virtualY[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;end &#9;&#10;&#9;end&#10;end&#10;--Checking&#10;function showMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.setposition(markers[i][&quot;obj&quot;],markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.hide(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;noOfMarkers = 4&#10;theForbiddenNumber = 99999.44444&#10;markers = markers or {}&#10;markerSize = 0.05&#10;toleranceFactor = 0.001&#10;expectedNoOfCombinations = expectedNoOfCombinations or noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;theCenter = theCenter or {}&#10;virtualX = virtualX or {}&#10;virtualY = virtualY or {}&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1,(noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;end&#10;&#10;&#9;for i = 1,noOfMarkers do&#10;&#9;&#9;markers[i] = {}&#10;&#9;&#9;markers[i][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Yellow&quot;)&#10;&#9;&#9;node.setscaling(markers[i][&quot;obj&quot;], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#9;&#10;&#9;allOuts[1] = &quot;Femur Sound&quot;;&#10;&#9;allOuts[2] = &quot;Local Origin Pin X&quot;;&#10;&#9;allOuts[3] = &quot;Local Origin Pin Y&quot;;&#10;&#9;allOuts[4] = &quot;Local Origin Pin Z&quot;;&#10;&#9;allOuts[5] = &quot;Virtual X Pin X&quot;;&#10;&#9;allOuts[6] = &quot;Virtual X Pin Y&quot;;&#10;&#9;allOuts[7] = &quot;Virtual X Pin Z&quot;;&#10;&#9;allOuts[8] = &quot;Virtual Y Pin X&quot;;&#10;&#9;allOuts[9] = &quot;Virtual Y Pin Y&quot;;&#10;&#9;allOuts[10] = &quot;Virtual Y Pin Z&quot;;&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel &quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel &quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;if checkFemurFound() then&#10;&#9;showMarkers()&#10;&#9;outputs.set(&quot;Femur Sound&quot;, 1)&#10;---[[&#10;&#9;--processing&#10;&#9;x = 1&#10;&#9;y = 2&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;&#9;if y == noOfMarkers then&#10;&#9;&#9;&#9;x = x+1&#10;&#9;&#9;&#9;y = x+1&#10;&#9;&#9;else&#10;&#9;&#9;&#9;y = y+1&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;&#10;&#9;--printArray(eculideanDistanceArray)&#10;&#9;getTheCenter(eculideanDistanceArray)&#10;&#9;outputs.set(&quot;Local Origin Pin X&quot;, theCenter[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Y&quot;, theCenter[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Z&quot;, theCenter[&quot;z&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin X&quot;, virtualX[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Y&quot;, virtualX[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Z&quot;, virtualX[&quot;z&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin X&quot;, virtualY[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Y&quot;, virtualY[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Z&quot;, virtualY[&quot;z&quot;] or theForbiddenNumber)&#10;else&#10;&#9;hideMarkers()&#10;&#9;outputs.set(&quot;Femur Sound&quot;, 2)&#10;&#9;outputs.set(&quot;Local Origin Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Z&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Z&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Z&quot;, theForbiddenNumber)&#10;end&#10;&#10;&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
            <String value="Channel 7"/>
            <String value="Channel 8"/>
            <String value="Channel 9"/>
            <String value="Channel 10"/>
            <String value="Channel 11"/>
            <String value="Channel 12"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Femur Sound"/>
            <String value="Local Origin Pin X"/>
            <String value="Local Origin Pin Y"/>
            <String value="Local Origin Pin Z"/>
            <String value="Virtual X Pin X"/>
            <String value="Virtual X Pin Y"/>
            <String value="Virtual X Pin Z"/>
            <String value="Virtual Y Pin X"/>
            <String value="Virtual Y Pin Y"/>
            <String value="Virtual Y Pin Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="12" type="Script" title="Clustering Tibial">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="1"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--Functions------------------------------&#10;function showMarkers()&#10;&#9;for i = 1, #drawMarkers do&#10;&#9;&#9;object.setposition(drawMarkers[i],tibialArray[i][&quot;x&quot;], tibialArray[i][&quot;y&quot;], tibialArray[i][&quot;z&quot;])&#10;&#9;&#9;--print(&quot;Marker NO. &quot;..i..&quot; CoOrdinates: &quot;, markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(drawMarkers[i])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, #drawMarkers do&#10;&#9;&#9;object.hide(drawMarkers[i])&#10;&#9;end&#10;end&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;&#9;print(&quot;--------------------------------------&quot;)&#10;end&#10;&#10;function printMarkersArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][&quot;x&quot;], A[i][&quot;y&quot;], A[i][&quot;z&quot;])&#10;&#9;end&#10;end&#10;&#10;function printSimpleArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i])&#10;&#9;end&#10;end&#10;function countMarkers(foundMarkers, number)&#10;&#9;found = false&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Value&quot;] == number then&#10;&#9;&#9;&#9;foundMarkers[i][&quot;Count&quot;] = foundMarkers[i][&quot;Count&quot;] + 1&#10;&#9;&#9;&#9;found = true&#10;&#9;&#9;&#9;return foundMarkers&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if found == false then&#10;&#9;&#9;c = (#foundMarkers)+1&#10;&#9;&#9;foundMarkers[c] = {}&#10;&#9;&#9;foundMarkers[c][&quot;Value&quot;] = number&#10;&#9;&#9;foundMarkers[c][&quot;Count&quot;] = 1&#10;&#9;end&#10;&#9;return foundMarkers&#10;end&#10;function&#9;doubleCheck()&#10;&#9;foundMarkers = {}&#10;&#9;foundMarkers[1] = {}&#10;&#9;foundMarkers[2] = {}&#10;&#9;foundMarkers[1][&quot;Value&quot;] = tibialArray[1][2]&#10;&#9;foundMarkers[1][&quot;Count&quot;] = 1&#10;&#9;foundMarkers[2][&quot;Value&quot;] = tibialArray[1][3]&#10;&#9;foundMarkers[2][&quot;Count&quot;] = 1&#10;&#9;for i = 2, #tibialArray do&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, tibialArray[i][2])&#10;&#9;&#9;foundMarkers = countMarkers(foundMarkers, tibialArray[i][3])&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;temp = {}&#10;&#9;for i = 1, #foundMarkers do&#10;&#9;&#9;if foundMarkers[i][&quot;Count&quot;] &gt; 2 then&#10;&#9;&#9;&#9;temp[counter] = markers[foundMarkers[i][&quot;Value&quot;]]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if #temp == 4 then&#10;&#9;&#9;tibialArray = temp&#10;&#9;&#9;return true&#10;&#9;end&#10;&#9;return false&#10;end&#10;function findTibialArray(A, tF, itrationNumber)&#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= TibialArrayDims[1]-tF and A[i][1] &lt;= TibialArrayDims[1]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[2]-tF and A[i][1] &lt;= TibialArrayDims[2]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[3]-tF and A[i][1] &lt;= TibialArrayDims[3]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[4]-tF and A[i][1] &lt;= TibialArrayDims[4]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[5]-tF and A[i][1] &lt;= TibialArrayDims[5]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[6]-tF and A[i][1] &lt;= TibialArrayDims[6]+tF then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;&#9;--print(&quot;found &quot;, counter, )&#10;&#9;end&#10;&#10;&#9;if counter &lt; 7 then&#10;print(&quot;here1 &quot;, #A, tF, itrationNumber)&#10;&#9;&#9;tibialArray = {}&#10;&#9;&#9;return &quot;not Found&quot;&#9;&#9;&#10;&#9;elseif doubleCheck() then&#10;print(&quot;here2 --&gt; &quot;, tF, itrationNumber)&#10;&#9;&#9;return &quot;found&quot;&#10;&#9;elseif itrationNumber &lt; maxNoItrations then&#10;--print(&quot;here3&quot;, tF)&#10;&#9;&#9;return findTibialArray(A, tF - 0.0001, itrationNumber + 1)&#10;&#9;else&#10;&#9;&#9;tibialArray = {}&#10;print(&quot;not Found!&quot;, itrationNumber)&#10;&#9;&#9;return &quot;not Found&quot;&#10;&#9;end&#10;end&#10;--Variables------------------------------&#10;noOfMarkers = noOfMarkers or 0&#10;toleranceFactor = toleranceFactor or 0&#10;theAvoidNumber = theAvoidNumber or 0&#10;tibialArray = tibialArray or {}&#10;TibialArrayDims = TibialArrayDims or {}&#10;expectedNoOfCombinations = expectedNoOfCombinations or 0&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;maxNoItrations = maxNoItrations or 20&#10;sitiuation = sitiuation or &quot;not found&quot;&#10;drawMarkers = drawMarkers or {}&#10;markerSize = markerSize or 0.05&#10;allIns = allIns or {}&#10;allOuts = allOuts or {}&#10;markers = markers or {}&#10;init = init or 0&#10;--Initialization-------------------------&#10;if init == 0 then&#10;&#9;for i = 1, 4 do&#10;&#9;&#9;drawMarkers[i]=object.create(&quot;Sphere&quot;,&quot;White&quot;)&#10;&#9;&#9;node.setscaling(drawMarkers[i], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#9;allIns[1] = &quot;Number of Markers&quot;&#10;&#9;allIns[2] = &quot;Tolerance Factor&quot;&#10;&#9;allIns[3] = &quot;The Avoid Number&quot;&#10;&#9;for i = 4, 9 do&#10;&#9;&#9;allIns[i] = &quot;TibialArrayDims &quot;..i-3&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;noOfMarkers = inputs.get(&quot;Number of Markers&quot;)&#10;&#9;toleranceFactor = inputs.get(&quot;Tolerance Factor&quot;)&#10;&#9;theAvoidNumber = inputs.get(&quot;The Avoid Number&quot;)&#10;&#9;for i = 1, 6 do&#10;&#9;&#9;TibialArrayDims[i] = inputs.get(&quot;TibialArrayDims &quot;..i)&#10;&#9;end&#10;&#9;for i = 10, 9 + noOfMarkers*3 do&#10;&#9;&#9;allIns[i] = &quot;Channel&quot;..i-9&#10;&#9;end&#10;&#9;inputs.setchannels(unpack(allIns))&#10;&#9;counter = 1&#10;&#9;i = 1&#10;&#9;while i &lt; (4 * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Tibial Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Tibial Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Tibial Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;allOuts[i] = &quot;Sitiuation&quot;&#10;&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;--Processing-----------------------------&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j] = {}&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel&quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel&quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel&quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;expectedNoOfCombinations = noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;x = 1&#10;y = 2&#10;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;if y == noOfMarkers then&#10;&#9;&#9;x = x+1&#10;&#9;&#9;y = x+1&#10;&#9;else&#10;&#9;&#9;y = y+1&#10;&#9;end&#10;end&#10;eculideanDistanceArray = sortArrayAssending(eculideanDistanceArray)&#10;--printArray(eculideanDistanceArray)&#10;sitiuation = findTibialArray(eculideanDistanceArray, toleranceFactor, 1)&#10;print(&quot;-----------sitiuation-&gt; &quot;, sitiuation)&#10;--printMarkersArray(tibialArray)&#10;&#10;for i = 1, (table.getn(tibialArray)) do&#10;&#9;if tibialArray[i] ~= nil then&#10;&#9;&#9;if tibialArray[i][&quot;x&quot;] ~= nil or tibialArray[i][&quot;y&quot;] ~= nil or tibialArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; X&quot;, tibialArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Y&quot;, tibialArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Z&quot;, tibialArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; X&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Y&quot;, theAvoidNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Z&quot;, theAvoidNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;if sitiuation == &quot;found&quot; then&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 1)&#10;&#9;showMarkers()&#10;else&#10;&#9;outputs.set(&quot;Sitiuation&quot;, 2)&#10;&#9;hideMarkers()&#10;end" collisions="false">
        <inputs>
          <StringArray>
            <String value="Number of Markers"/>
            <String value="Tolerance Factor"/>
            <String value="The Avoid Number"/>
            <String value="TibialArrayDims 1"/>
            <String value="TibialArrayDims 2"/>
            <String value="TibialArrayDims 3"/>
            <String value="TibialArrayDims 4"/>
            <String value="TibialArrayDims 5"/>
            <String value="TibialArrayDims 6"/>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tibial Array 1 X"/>
            <String value="Tibial Array 1 Y"/>
            <String value="Tibial Array 1 Z"/>
            <String value="Tibial Array 2 X"/>
            <String value="Tibial Array 2 Y"/>
            <String value="Tibial Array 2 Z"/>
            <String value="Tibial Array 3 X"/>
            <String value="Tibial Array 3 Y"/>
            <String value="Tibial Array 3 Z"/>
            <String value="Tibial Array 4 X"/>
            <String value="Tibial Array 4 Y"/>
            <String value="Tibial Array 4 Z"/>
            <String value="Sitiuation"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="13" type="Script" title="Clustering">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
            <String value="Channel37"/>
            <String value="Channel38"/>
            <String value="Channel39"/>
            <String value="Channel40"/>
            <String value="Channel41"/>
            <String value="Channel42"/>
            <String value="Channel43"/>
            <String value="Channel44"/>
            <String value="Channel45"/>
            <String value="Channel46"/>
            <String value="Channel47"/>
            <String value="Channel48"/>
            <String value="Channel49"/>
            <String value="Channel50"/>
            <String value="Channel51"/>
            <String value="Channel52"/>
            <String value="Channel53"/>
            <String value="Channel54"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tibial Array 1 X"/>
            <String value="Tibial Array 1 Y"/>
            <String value="Tibial Array 1 Z"/>
            <String value="Tibial Array 2 X"/>
            <String value="Tibial Array 2 Y"/>
            <String value="Tibial Array 2 Z"/>
            <String value="Tibial Array 3 X"/>
            <String value="Tibial Array 3 Y"/>
            <String value="Tibial Array 3 Z"/>
            <String value="Tibial Array 4 X"/>
            <String value="Tibial Array 4 Y"/>
            <String value="Tibial Array 4 Z"/>
            <String value="Femoral Array 1 X"/>
            <String value="Femoral Array 1 Y"/>
            <String value="Femoral Array 1 Z"/>
            <String value="Femoral Array 2 X"/>
            <String value="Femoral Array 2 Y"/>
            <String value="Femoral Array 2 Z"/>
            <String value="Femoral Array 3 X"/>
            <String value="Femoral Array 3 Y"/>
            <String value="Femoral Array 3 Z"/>
            <String value="Femoral Array 4 X"/>
            <String value="Femoral Array 4 Y"/>
            <String value="Femoral Array 4 Z"/>
            <String value="EndEffector Array 1 X"/>
            <String value="EndEffector Array 1 Y"/>
            <String value="EndEffector Array 1 Z"/>
            <String value="EndEffector Array 2 X"/>
            <String value="EndEffector Array 2 Y"/>
            <String value="EndEffector Array 2 Z"/>
            <String value="EndEffector Array 3 X"/>
            <String value="EndEffector Array 3 Y"/>
            <String value="EndEffector Array 3 Z"/>
            <String value="EndEffector Array 4 X"/>
            <String value="EndEffector Array 4 Y"/>
            <String value="EndEffector Array 4 Z"/>
            <String value="Base Array 1 X"/>
            <String value="Base Array 1 Y"/>
            <String value="Base Array 1 Z"/>
            <String value="Base Array 2 X"/>
            <String value="Base Array 2 Y"/>
            <String value="Base Array 2 Z"/>
            <String value="Base Array 3 X"/>
            <String value="Base Array 3 Y"/>
            <String value="Base Array 3 Z"/>
            <String value="Base Array 4 X"/>
            <String value="Base Array 4 Y"/>
            <String value="Base Array 4 Z"/>
            <String value="Blue Probe 1 X"/>
            <String value="Blue Probe 1 Y"/>
            <String value="Blue Probe 1 Z"/>
            <String value="Blue Probe 2 X"/>
            <String value="Blue Probe 2 Y"/>
            <String value="Blue Probe 2 Z"/>
            <String value="Blue Probe 3 X"/>
            <String value="Blue Probe 3 Y"/>
            <String value="Blue Probe 3 Z"/>
            <String value="Green Probe 1 X"/>
            <String value="Green Probe 1 Y"/>
            <String value="Green Probe 1 Z"/>
            <String value="Green Probe 2 X"/>
            <String value="Green Probe 2 Y"/>
            <String value="Green Probe 2 Z"/>
            <String value="Green Probe 3 X"/>
            <String value="Green Probe 3 Y"/>
            <String value="Green Probe 3 Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="14" type="Script" title="Clustering">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
            <String value="Channel37"/>
            <String value="Channel38"/>
            <String value="Channel39"/>
            <String value="Channel40"/>
            <String value="Channel41"/>
            <String value="Channel42"/>
            <String value="Channel43"/>
            <String value="Channel44"/>
            <String value="Channel45"/>
            <String value="Channel46"/>
            <String value="Channel47"/>
            <String value="Channel48"/>
            <String value="Channel49"/>
            <String value="Channel50"/>
            <String value="Channel51"/>
            <String value="Channel52"/>
            <String value="Channel53"/>
            <String value="Channel54"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tibial Array 1 X"/>
            <String value="Tibial Array 1 Y"/>
            <String value="Tibial Array 1 Z"/>
            <String value="Tibial Array 2 X"/>
            <String value="Tibial Array 2 Y"/>
            <String value="Tibial Array 2 Z"/>
            <String value="Tibial Array 3 X"/>
            <String value="Tibial Array 3 Y"/>
            <String value="Tibial Array 3 Z"/>
            <String value="Tibial Array 4 X"/>
            <String value="Tibial Array 4 Y"/>
            <String value="Tibial Array 4 Z"/>
            <String value="Femoral Array 1 X"/>
            <String value="Femoral Array 1 Y"/>
            <String value="Femoral Array 1 Z"/>
            <String value="Femoral Array 2 X"/>
            <String value="Femoral Array 2 Y"/>
            <String value="Femoral Array 2 Z"/>
            <String value="Femoral Array 3 X"/>
            <String value="Femoral Array 3 Y"/>
            <String value="Femoral Array 3 Z"/>
            <String value="Femoral Array 4 X"/>
            <String value="Femoral Array 4 Y"/>
            <String value="Femoral Array 4 Z"/>
            <String value="EndEffector Array 1 X"/>
            <String value="EndEffector Array 1 Y"/>
            <String value="EndEffector Array 1 Z"/>
            <String value="EndEffector Array 2 X"/>
            <String value="EndEffector Array 2 Y"/>
            <String value="EndEffector Array 2 Z"/>
            <String value="EndEffector Array 3 X"/>
            <String value="EndEffector Array 3 Y"/>
            <String value="EndEffector Array 3 Z"/>
            <String value="EndEffector Array 4 X"/>
            <String value="EndEffector Array 4 Y"/>
            <String value="EndEffector Array 4 Z"/>
            <String value="Base Array 1 X"/>
            <String value="Base Array 1 Y"/>
            <String value="Base Array 1 Z"/>
            <String value="Base Array 2 X"/>
            <String value="Base Array 2 Y"/>
            <String value="Base Array 2 Z"/>
            <String value="Base Array 3 X"/>
            <String value="Base Array 3 Y"/>
            <String value="Base Array 3 Z"/>
            <String value="Base Array 4 X"/>
            <String value="Base Array 4 Y"/>
            <String value="Base Array 4 Z"/>
            <String value="Blue Probe 1 X"/>
            <String value="Blue Probe 1 Y"/>
            <String value="Blue Probe 1 Z"/>
            <String value="Blue Probe 2 X"/>
            <String value="Blue Probe 2 Y"/>
            <String value="Blue Probe 2 Z"/>
            <String value="Blue Probe 3 X"/>
            <String value="Blue Probe 3 Y"/>
            <String value="Blue Probe 3 Z"/>
            <String value="Green Probe 1 X"/>
            <String value="Green Probe 1 Y"/>
            <String value="Green Probe 1 Z"/>
            <String value="Green Probe 2 X"/>
            <String value="Green Probe 2 Y"/>
            <String value="Green Probe 2 Z"/>
            <String value="Green Probe 3 X"/>
            <String value="Green Probe 3 Y"/>
            <String value="Green Probe 3 Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="15" type="Script" title="Endeffector">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;function checkEndeffectorFound()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;if&#9;(markers[i][&quot;x&quot;] == 0 and markers[i][&quot;y&quot;] == 0 and markers[i][&quot;z&quot;] == 0) or (markers[i][&quot;x&quot;] == theForbiddenNumber and markers[i][&quot;y&quot;] == theForbiddenNumber and markers[i][&quot;z&quot;] == theForbiddenNumber)&#9;then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function showMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.setposition(markers[i][&quot;obj&quot;],markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.hide(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;noOfMarkers = 4&#10;theForbiddenNumber = 99999.44444&#10;markers = markers or {}&#10;markerSize = 0.01&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1,(noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;end&#10;&#10;&#9;for i = 1,noOfMarkers do&#10;&#9;&#9;markers[i] = {}&#10;&#9;&#9;markers[i][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;red&quot;)&#10;&#9;&#9;node.setscaling(markers[i][&quot;obj&quot;], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(&quot;Endeffector Sound&quot;)&#10;&#9;init = 1&#10;end&#10;&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel &quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel &quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;if checkEndeffectorFound() then&#10;&#9;showMarkers()&#10;&#9;outputs.set(&quot;Endeffector Sound&quot;, 1)&#10;else&#10;&#9;hideMarkers()&#10;&#9;outputs.set(&quot;Endeffector Sound&quot;, 2)&#10;end&#10;&#10;&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
            <String value="Channel 7"/>
            <String value="Channel 8"/>
            <String value="Channel 9"/>
            <String value="Channel 10"/>
            <String value="Channel 11"/>
            <String value="Channel 12"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Endeffector Sound"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="16" type="Script" title="Clustering">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel1"/>
            <String value="Channel2"/>
            <String value="Channel3"/>
            <String value="Channel4"/>
            <String value="Channel5"/>
            <String value="Channel6"/>
            <String value="Channel7"/>
            <String value="Channel8"/>
            <String value="Channel9"/>
            <String value="Channel10"/>
            <String value="Channel11"/>
            <String value="Channel12"/>
            <String value="Channel13"/>
            <String value="Channel14"/>
            <String value="Channel15"/>
            <String value="Channel16"/>
            <String value="Channel17"/>
            <String value="Channel18"/>
            <String value="Channel19"/>
            <String value="Channel20"/>
            <String value="Channel21"/>
            <String value="Channel22"/>
            <String value="Channel23"/>
            <String value="Channel24"/>
            <String value="Channel25"/>
            <String value="Channel26"/>
            <String value="Channel27"/>
            <String value="Channel28"/>
            <String value="Channel29"/>
            <String value="Channel30"/>
            <String value="Channel31"/>
            <String value="Channel32"/>
            <String value="Channel33"/>
            <String value="Channel34"/>
            <String value="Channel35"/>
            <String value="Channel36"/>
            <String value="Channel37"/>
            <String value="Channel38"/>
            <String value="Channel39"/>
            <String value="Channel40"/>
            <String value="Channel41"/>
            <String value="Channel42"/>
            <String value="Channel43"/>
            <String value="Channel44"/>
            <String value="Channel45"/>
            <String value="Channel46"/>
            <String value="Channel47"/>
            <String value="Channel48"/>
            <String value="Channel49"/>
            <String value="Channel50"/>
            <String value="Channel51"/>
            <String value="Channel52"/>
            <String value="Channel53"/>
            <String value="Channel54"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tibial Array 1 X"/>
            <String value="Tibial Array 1 Y"/>
            <String value="Tibial Array 1 Z"/>
            <String value="Tibial Array 2 X"/>
            <String value="Tibial Array 2 Y"/>
            <String value="Tibial Array 2 Z"/>
            <String value="Tibial Array 3 X"/>
            <String value="Tibial Array 3 Y"/>
            <String value="Tibial Array 3 Z"/>
            <String value="Tibial Array 4 X"/>
            <String value="Tibial Array 4 Y"/>
            <String value="Tibial Array 4 Z"/>
            <String value="Femoral Array 1 X"/>
            <String value="Femoral Array 1 Y"/>
            <String value="Femoral Array 1 Z"/>
            <String value="Femoral Array 2 X"/>
            <String value="Femoral Array 2 Y"/>
            <String value="Femoral Array 2 Z"/>
            <String value="Femoral Array 3 X"/>
            <String value="Femoral Array 3 Y"/>
            <String value="Femoral Array 3 Z"/>
            <String value="Femoral Array 4 X"/>
            <String value="Femoral Array 4 Y"/>
            <String value="Femoral Array 4 Z"/>
            <String value="EndEffector Array 1 X"/>
            <String value="EndEffector Array 1 Y"/>
            <String value="EndEffector Array 1 Z"/>
            <String value="EndEffector Array 2 X"/>
            <String value="EndEffector Array 2 Y"/>
            <String value="EndEffector Array 2 Z"/>
            <String value="EndEffector Array 3 X"/>
            <String value="EndEffector Array 3 Y"/>
            <String value="EndEffector Array 3 Z"/>
            <String value="EndEffector Array 4 X"/>
            <String value="EndEffector Array 4 Y"/>
            <String value="EndEffector Array 4 Z"/>
            <String value="Base Array 1 X"/>
            <String value="Base Array 1 Y"/>
            <String value="Base Array 1 Z"/>
            <String value="Base Array 2 X"/>
            <String value="Base Array 2 Y"/>
            <String value="Base Array 2 Z"/>
            <String value="Base Array 3 X"/>
            <String value="Base Array 3 Y"/>
            <String value="Base Array 3 Z"/>
            <String value="Base Array 4 X"/>
            <String value="Base Array 4 Y"/>
            <String value="Base Array 4 Z"/>
            <String value="Blue Probe 1 X"/>
            <String value="Blue Probe 1 Y"/>
            <String value="Blue Probe 1 Z"/>
            <String value="Blue Probe 2 X"/>
            <String value="Blue Probe 2 Y"/>
            <String value="Blue Probe 2 Z"/>
            <String value="Blue Probe 3 X"/>
            <String value="Blue Probe 3 Y"/>
            <String value="Blue Probe 3 Z"/>
            <String value="Green Probe 1 X"/>
            <String value="Green Probe 1 Y"/>
            <String value="Green Probe 1 Z"/>
            <String value="Green Probe 2 X"/>
            <String value="Green Probe 2 Y"/>
            <String value="Green Probe 2 Z"/>
            <String value="Green Probe 3 X"/>
            <String value="Green Probe 3 Y"/>
            <String value="Green Probe 3 Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="17" type="Script" title="Base">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;function checkBaseFound()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;if&#9;(markers[i][&quot;x&quot;] == 0 and markers[i][&quot;y&quot;] == 0 and markers[i][&quot;z&quot;] == 0) or (markers[i][&quot;x&quot;] == theForbiddenNumber and markers[i][&quot;y&quot;] == theForbiddenNumber and markers[i][&quot;z&quot;] == theForbiddenNumber)&#9;then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function showMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.setposition(markers[i][&quot;obj&quot;],markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.hide(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;noOfMarkers = 4&#10;theForbiddenNumber = 99999.44444&#10;markers = markers or {}&#10;markerSize = 0.01&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1,(noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;end&#10;&#10;&#9;for i = 1,noOfMarkers do&#10;&#9;&#9;markers[i] = {}&#10;&#9;&#9;markers[i][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;Magenta&quot;)&#10;&#9;&#9;node.setscaling(markers[i][&quot;obj&quot;], markerSize, markerSize, markerSize)&#9;&#9;&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(&quot;Base Sound&quot;)&#10;&#9;init = 1&#10;end&#10;&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel &quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel &quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;if checkBaseFound() then&#10;&#9;showMarkers()&#10;&#9;outputs.set(&quot;Base Sound&quot;, 1)&#10;else&#10;&#9;hideMarkers()&#10;&#9;outputs.set(&quot;Base Sound&quot;, 2)&#10;end&#10;&#10;&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
            <String value="Channel 7"/>
            <String value="Channel 8"/>
            <String value="Channel 9"/>
            <String value="Channel 10"/>
            <String value="Channel 11"/>
            <String value="Channel 12"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Base Sound"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="18" type="Script" title="Tibial">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--FUNCTIONS------------------------------------------------------&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, x do--table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;end&#10;--Calibrating&#10;function getTheCenter(A)&#10;print(&quot;Done!&quot;, expectedNoOfCombinations)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= 0.124971-toleranceFactor and A[i][1] &lt;= 0.124971+toleranceFactor then&#10;&#9;&#9;&#9;theCenter[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;theCenter[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;theCenter[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;elseif A[i][1] &gt;= 0.06053-toleranceFactor and A[i][1] &lt;= 0.06053+toleranceFactor then&#10;&#9;&#9;&#9;virtualX[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;virtualX[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;virtualX[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;elseif A[i][1] &gt;= 0.095495-toleranceFactor and A[i][1] &lt;= 0.095495+toleranceFactor then&#10;&#9;&#9;&#9;virtualY[&quot;x&quot;] = (markers[A[i][2]][&quot;x&quot;] + markers[A[i][3]][&quot;x&quot;])/2.0&#10;&#9;&#9;&#9;virtualY[&quot;y&quot;] = (markers[A[i][2]][&quot;y&quot;] + markers[A[i][3]][&quot;y&quot;])/2.0&#10;&#9;&#9;&#9;virtualY[&quot;z&quot;] = (markers[A[i][2]][&quot;z&quot;] + markers[A[i][3]][&quot;z&quot;])/2.0&#10;&#9;&#9;end &#9;&#10;&#9;end&#10;end&#10;function checkTibialFound()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;if&#9;(markers[i][&quot;x&quot;] == 0 and markers[i][&quot;y&quot;] == 0 and markers[i][&quot;z&quot;] == 0) or (markers[i][&quot;x&quot;] == theForbiddenNumber and markers[i][&quot;y&quot;] == theForbiddenNumber and markers[i][&quot;z&quot;] == theForbiddenNumber)&#9;then&#10;&#9;&#9;&#9;return false&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return true&#10;end&#10;function showMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.setposition(markers[i][&quot;obj&quot;],markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;&#9;&#9;object.show(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;function hideMarkers()&#10;&#9;for i = 1, noOfMarkers do&#10;&#9;&#9;object.hide(markers[i][&quot;obj&quot;])&#10;&#9;end&#10;end&#10;--init variables------------------------------------&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;noOfMarkers = 4&#10;theForbiddenNumber = 99999.44444&#10;markers = markers or {}&#10;markerSize = 0.05&#10;toleranceFactor = 0.001&#10;expectedNoOfCombinations = expectedNoOfCombinations or noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;theCenter = theCenter or {}&#10;virtualX = virtualX or {}&#10;virtualY = virtualY or {}&#10;&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1,(noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel &quot;..i&#10;&#9;end&#10;&#10;&#9;for i = 1,noOfMarkers do&#10;&#9;&#9;markers[i] = {}&#10;&#9;&#9;markers[i][&quot;obj&quot;]=object.create(&quot;Sphere&quot;,&quot;white&quot;)&#10;&#9;&#9;node.setscaling(markers[i][&quot;obj&quot;], markerSize, markerSize, markerSize)&#9;&#9;&#10;&#9;end&#10;&#9;hideMarkers()&#10;&#10;&#9;allOuts[1] = &quot;Tibial Sound&quot;;&#10;&#9;allOuts[2] = &quot;Local Origin Pin X&quot;;&#10;&#9;allOuts[3] = &quot;Local Origin Pin Y&quot;;&#10;&#9;allOuts[4] = &quot;Local Origin Pin Z&quot;;&#10;&#9;allOuts[5] = &quot;Virtual X Pin X&quot;;&#10;&#9;allOuts[6] = &quot;Virtual X Pin Y&quot;;&#10;&#9;allOuts[7] = &quot;Virtual X Pin Z&quot;;&#10;&#9;allOuts[8] = &quot;Virtual Y Pin X&quot;;&#10;&#9;allOuts[9] = &quot;Virtual Y Pin Y&quot;;&#10;&#9;allOuts[10] = &quot;Virtual Y Pin Z&quot;;&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel &quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel &quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel &quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;if checkTibialFound() then&#10;&#9;showMarkers()&#10;&#10;&#9;outputs.set(&quot;Tibial Sound&quot;, 1)&#10;---[[&#10;&#9;--processing&#10;&#9;x = 1&#10;&#9;y = 2&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;&#9;if y == noOfMarkers then&#10;&#9;&#9;&#9;x = x+1&#10;&#9;&#9;&#9;y = x+1&#10;&#9;&#9;else&#10;&#9;&#9;&#9;y = y+1&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;&#10;&#9;--printArray(eculideanDistanceArray)&#10;&#9;getTheCenter(eculideanDistanceArray)&#10;&#9;outputs.set(&quot;Local Origin Pin X&quot;, theCenter[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Y&quot;, theCenter[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Z&quot;, theCenter[&quot;z&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin X&quot;, virtualX[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Y&quot;, virtualX[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Z&quot;, virtualX[&quot;z&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin X&quot;, virtualY[&quot;x&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Y&quot;, virtualY[&quot;y&quot;] or theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Z&quot;, virtualY[&quot;z&quot;] or theForbiddenNumber)&#10;else&#10;&#9;hideMarkers()&#10;&#9;outputs.set(&quot;Tibial Sound&quot;, 2)&#10;&#9;outputs.set(&quot;Local Origin Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Local Origin Pin Z&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual X Pin Z&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin X&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Y&quot;, theForbiddenNumber)&#10;&#9;outputs.set(&quot;Virtual Y Pin Z&quot;, theForbiddenNumber)&#10;end&#10;&#10;&#10;" collisions="false">
        <inputs>
          <StringArray>
            <String value="Channel 1"/>
            <String value="Channel 2"/>
            <String value="Channel 3"/>
            <String value="Channel 4"/>
            <String value="Channel 5"/>
            <String value="Channel 6"/>
            <String value="Channel 7"/>
            <String value="Channel 8"/>
            <String value="Channel 9"/>
            <String value="Channel 10"/>
            <String value="Channel 11"/>
            <String value="Channel 12"/>
          </StringArray>
        </inputs>
        <outputs>
          <StringArray>
            <String value="Tibial Sound"/>
            <String value="Local Origin Pin X"/>
            <String value="Local Origin Pin Y"/>
            <String value="Local Origin Pin Z"/>
            <String value="Virtual X Pin X"/>
            <String value="Virtual X Pin Y"/>
            <String value="Virtual X Pin Z"/>
            <String value="Virtual Y Pin X"/>
            <String value="Virtual Y Pin Y"/>
            <String value="Virtual Y Pin Z"/>
          </StringArray>
        </outputs>
      </data>
    </module>
    <module id="19" type="Script" title="Clustering">
      <event_mapping event="Action" action="6"/>
      <event_mapping event="Calibrate" action="5"/>
      <event_mapping event="Play" action="0"/>
      <event_mapping event="Reset" action="3"/>
      <event_mapping event="Stop" action="2"/>
      <data id="0" script="--Functions&#10;--Euclidean Distance&#10;function getEuclideanDistance(p1, p2)&#10;&#9;return math.sqrt((p1[&quot;x&quot;]-p2[&quot;x&quot;])^2 + (p1[&quot;y&quot;]-p2[&quot;y&quot;])^2 + (p1[&quot;z&quot;]-p2[&quot;z&quot;])^2)&#10;end&#10;--Sorting&#10;function sortArrayAssending(A)&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;for j = i+1, expectedNoOfCombinations do&#10;&#9;&#9;&#9;if A[i][1] &gt; A[j][1] then&#10;&#9;&#9;&#9;&#9;temp = A[j]&#10;&#9;&#9;&#9;&#9;A[j] = A[i]&#10;&#9;&#9;&#9;&#9;A[i] = temp&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;return A&#10;end&#10;--Printing:&#10;function printArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;x = 30&#10;&#9;if table.getn(A) &lt; x then&#10;&#9;&#9;x = table.getn(A)&#10;&#9;end&#10;&#9;for i = 1, 100 do--table.getn(A) do&#10;&#9;&#9;print(A[i][1], A[i][2], A[i][3])&#10;&#9;end&#10;end&#10;&#10;function printMarkersArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i][&quot;x&quot;], A[i][&quot;y&quot;], A[i][&quot;z&quot;])&#10;&#9;end&#10;end&#10;&#10;function printSimpleArray(A)&#10;&#9;--print(table.getn(A))&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;print(A[i])&#10;&#9;end&#10;end&#10;--check Nulls&#10;function checkNil(A)&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;if A[i][1] == nil or A[i][2] == nil or A[i][3] == nil then&#10;&#9;&#9;&#9;print(&quot;Nil Found on element&quot;, i)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;--Find Segments - there might be a problem cuz numbers are too close in ecu distance&#10;function findTibialArray(A) &#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= TibialArrayDims[1]-toleranceFactor and A[i][1] &lt;= TibialArrayDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[2]-toleranceFactor and A[i][1] &lt;= TibialArrayDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[3]-toleranceFactor and A[i][1] &lt;= TibialArrayDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= TibialArrayDims[4]-toleranceFactor and A[i][1] &lt;= TibialArrayDims[4]+toleranceFactor then&#10;&#9;&#9;&#9;tibialArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;function findFemoralArray(A)&#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= FemoralArrayDims[1]-toleranceFactor and A[i][1] &lt;= FemoralArrayDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[2]-toleranceFactor and A[i][1] &lt;= FemoralArrayDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[3]-toleranceFactor and A[i][1] &lt;= FemoralArrayDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= FemoralArrayDims[4]-toleranceFactor and A[i][1] &lt;= FemoralArrayDims[4]+toleranceFactor then&#10;&#9;&#9;&#9;femoralArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;function findEndEffectorArray(A) &#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= EndEffectorArrayDims[1]-toleranceFactor and A[i][1] &lt;= EndEffectorArrayDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;endEffectorArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= EndEffectorArrayDims[2]-toleranceFactor and A[i][1] &lt;= EndEffectorArrayDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;endEffectorArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= EndEffectorArrayDims[3]-toleranceFactor and A[i][1] &lt;= EndEffectorArrayDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;endEffectorArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= EndEffectorArrayDims[4]-toleranceFactor and A[i][1] &lt;= EndEffectorArrayDims[4]+toleranceFactor then&#10;&#9;&#9;&#9;endEffectorArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#9;&#10;&#10;function findBaseArray(A) &#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= BaseArrayDims[1]-toleranceFactor and A[i][1] &lt;= BaseArrayDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;baseArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= BaseArrayDims[2]-toleranceFactor and A[i][1] &lt;= BaseArrayDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;baseArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= BaseArrayDims[3]-toleranceFactor and A[i][1] &lt;= BaseArrayDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;baseArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= BaseArrayDims[4]-toleranceFactor and A[i][1] &lt;= BaseArrayDims[4]+toleranceFactor then&#10;&#9;&#9;&#9;baseArray[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#9;&#10;&#10;function findBlueProbe(A) &#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= BlueProbeDims[1]-toleranceFactor and A[i][1] &lt;= BlueProbeDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;blueProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= BlueProbeDims[2]-toleranceFactor and A[i][1] &lt;= BlueProbeDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;blueProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= BlueProbeDims[3]-toleranceFactor and A[i][1] &lt;= BlueProbeDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;blueProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#9;&#9;&#10;&#10;function findGreenProbe(A)  &#10;&#9;counter = 1&#10;&#9;for i = 1, expectedNoOfCombinations do&#10;&#9;&#9;if A[i][1] &gt;= GreenProbeDims[1]-toleranceFactor and A[i][1] &lt;= GreenProbeDims[1]+toleranceFactor then&#10;&#9;&#9;&#9;greenProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= GreenProbeDims[2]-toleranceFactor and A[i][1] &lt;= GreenProbeDims[2]+toleranceFactor then&#10;&#9;&#9;&#9;greenProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;elseif A[i][1] &gt;= GreenProbeDims[3]-toleranceFactor and A[i][1] &lt;= GreenProbeDims[3]+toleranceFactor then&#10;&#9;&#9;&#9;greenProbe[counter] = A[i]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;function isTheSameMarkers(M1, M2)&#10;&#9;if(M1[&quot;x&quot;] == M2[&quot;x&quot;] or M1[&quot;y&quot;] == M2[&quot;y&quot;] or M1[&quot;z&quot;] == M2[&quot;z&quot;]) then&#10;&#9;&#9;return true&#10;&#9;end&#10;&#9;return false&#10;end&#10;&#10;--This Function check on the system markers and check the redundent one's and markers from outside of the segments&#10;function fixMarkers(A)&#10;&#10;--[[&#10;&#9;print(&quot;==============================&quot;)&#10;&#9;print(table.getn(A))&#10;&#9;print(&quot;-----------------------------&quot;)&#10;&#9;printSimpleArray(A)&#10;&#9;print(&quot;-----------------------------&quot;)&#10;--]]&#10;&#10;&#9;markerCount = {}&#10;&#9;markerCount[&quot;value&quot;] = {}&#10;&#9;markerCount[&quot;count&quot;] = {}&#10;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;markerCount[&quot;value&quot;][i] = 0&#10;&#9;&#9;markerCount[&quot;count&quot;][i] = 0&#10;&#9;end&#10;&#9;for i = 1, table.getn(A) do --I already took the first marker in...&#10;&#9;&#9;found = false&#10;&#9;&#9;for j = 1, table.getn(markerCount[&quot;value&quot;]) do&#10;&#9;&#9;&#9;if A[i] == markerCount[&quot;value&quot;][j] then&#10;&#9;&#9;&#9;&#9;markerCount[&quot;count&quot;][j] = markerCount[&quot;count&quot;][j] + 1&#10;&#9;&#9;&#9;&#9;found = true&#10;--[[&#10;&#9;&#9;&#9;&#9;if table.getn(A)==6 then&#10;&#9;&#9;&#9;&#9;&#9;print(markerCount[&quot;value&quot;][j], markerCount[&quot;count&quot;][j], A[i])&#10;&#9;&#9;&#9;&#9;end&#10;--]]&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if found == false then --if not found&#10;&#9;&#9;&#9;for j = 1, table.getn(A) do&#10;&#9;&#9;&#9;&#9;if markerCount[&quot;value&quot;][j] == 0 then&#10;&#9;&#9;&#9;&#9;&#9;markerCount[&quot;value&quot;][j] = A[i]&#10;&#9;&#9;&#9;&#9;&#9;markerCount[&quot;count&quot;][j] = 1&#10;--[[&#10;&#9;&#9;&#9;&#9;&#9;if table.getn(A)==6 then&#10;&#9;&#9;&#9;&#9;&#9;print(A[i])&#10;&#9;&#9;&#9;&#9;&#9;&#9;--print(markerCount[&quot;value&quot;][j], markerCount[&quot;count&quot;][j],&quot;&lt;-- NOT FOUND&quot;, A[i])&#10;&#9;&#9;&#9;&#9;&#9;end&#10;--]]&#10;&#10;&#9;&#9;&#9;&#9;&#9;break &#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;--[[&#10;&#9;print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)&#10;&#9;printSimpleArray(markerCount[&quot;value&quot;])&#10;&#9;--print(table.getn(markerCount[&quot;value&quot;]))&#10;&#9;print(&quot;--------------------------&quot;)&#10;&#9;printSimpleArray(markerCount[&quot;count&quot;])&#10;&#9;--print(table.getn(markerCount[&quot;count&quot;]))&#10;&#9;print(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;)&#10;--]]&#10;&#9;finalArray = {}&#10;&#9;counter = 1&#10;&#9;for i = 1, table.getn(markerCount[&quot;value&quot;]) do&#10;&#9;&#9;if markerCount[&quot;count&quot;][i] &gt; 1 then&#10;&#9;&#9;&#9;finalArray[counter] = markers[markerCount[&quot;value&quot;][i]]&#10;&#9;&#9;&#9;counter = counter + 1&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;--print(table.getn(finalArray))&#10;&#9;return finalArray&#10;end&#10;&#10;--This Function is to translate the distance to markers and clears the extra markers&#10;function resolveArray(A)&#10;&#10;--[[&#10;&#9;print(table.getn(A),&quot;------------ ------------- ------------------ &quot;)&#10;&#9;--if table.getn(A) == 4 then&#10;&#9;&#9;for i = 1, table.getn(A) do&#10;&#9;&#9;&#9;print(A[i][1], A[i][2], A[i][3],&quot;&lt;------------------&quot;)&#10;&#9;&#9;end&#10;&#9;--end&#10;--]]&#10;&#10;&#9;newArray = {}&#10;&#9;j = 1&#10;&#9;i = 1&#10;&#9;while i &lt;= table.getn(A)*2 do&#10;&#9;&#9;newArray[i] = A[j][2]&#10;&#9;&#9;i = i+1&#10;&#9;&#9;newArray[i] = A[j][3]&#10;&#9;&#9;i = i+1&#10;&#9;&#9;j = j+1&#10;&#9;end&#10;&#9;return fixMarkers(newArray)&#10;end&#10;&#10;-------------------------------------------------------------------------------------------------------------------------------------&#10;-------------------------------------------------------------------------------------------------------------------------------------&#10;-------------------------------------------------------------------------------------------------------------------------------------&#10;&#10;--ScalingFactor variable controls all the inputs scaling factor&#10;toleranceFactor = toleranceFactor or 0&#10;--init variables&#10;--Set this variable with the total number of markers in all segments&#10;noOfMarkers = noOfMarkers or 0&#10;init = init or 0&#10;allinputs = allinputs or {}&#10;allOuts = allOuts or {}&#10;--Scalling Factor for the distance unit control&#10;--The forbidden number is the number that indicats nil value in a channel&#10;theForbiddenNumber = theForbiddenNumber or 0&#10;expectedNoOfCombinations = expectedNoOfCombinations or noOfMarkers * (noOfMarkers - 1) / 2 --fact(noOfMarkers)/(fact(noOfMarkers-2) * 2)  --Combinational Logic&#10;eculideanDistanceArray = eculideanDistanceArray or {}&#10;input = input or {}&#10;markers = markers or {}&#10;--DIM's in CM&#10;TibialArrayDims = TibialArrayDims or {}&#10;FemoralArrayDims = FemoralArrayDims or {}&#10;EndEffectorArrayDims = EndEffectorArrayDims or {}&#10;BaseArrayDims = BaseArrayDims or {}&#10;BlueProbeDims = BlueProbeDims or {}&#10;GreenProbeDims = GreenProbeDims or {}&#10;tibialArray = tibialArray or {}&#10;femoralArray = femoralArray or {}&#10;endEffectorArray = endEffectorArray or {}&#10;baseArray = baseArray or {}&#10;blueProbe = blueProbe or {}&#10;greenProbe = greenProbe or {}&#10;--Separating segments from each other by steps, each is the expected dims&#10;tibial = table.getn(TibialArrayDims)&#10;femoral = tibial + table.getn(FemoralArrayDims)&#10;endEffector = femoral + table.getn(EndEffectorArrayDims)&#10;base = endEffector + table.getn(BaseArrayDims)&#10;blue = base + table.getn(BlueProbeDims)&#10;green = blue + table.getn(GreenProbeDims)&#10;&#10;--init the code&#10;if init == 0 then&#10;&#9;for i = 1, (noOfMarkers * 3) do&#10;&#9;&#9;allinputs[i] = &quot;Channel&quot;..i&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = 1&#10;&#9;while i &lt; (tibial * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Tibial Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Tibial Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Tibial Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = (tibial * 3) + 1&#10;&#9;while i &lt; (femoral * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Femoral Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Femoral Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Femoral Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = (femoral * 3) + 1&#10;&#9;while i &lt; (endEffector * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;EndEffector Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;EndEffector Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;EndEffector Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = (endEffector * 3) + 1&#10;&#9;while i &lt; (base * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Base Array &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Base Array &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Base Array &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = (base * 3) + 1&#10;&#9;while i &lt; (blue * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Blue Probe &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Blue Probe &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Blue Probe &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#9;counter = 1&#10;&#9;i = (blue * 3) + 1&#10;&#9;while i &lt; (green * 3) + 1 do&#10;&#9;&#9;allOuts[i] = &quot;Green Probe &quot;..counter..&quot; X&quot;&#10;&#9;&#9;allOuts[i+1] = &quot;Green Probe &quot;..counter..&quot; Y&quot;&#10;&#9;&#9;allOuts[i+2] = &quot;Green Probe &quot;..counter..&quot; Z&quot;&#10;&#9;&#9;i = i+3&#10;&#9;&#9;counter = counter + 1&#10;&#9;end&#10;&#10;&#9;inputs.setchannels(unpack(allinputs))&#10;&#9;outputs.setchannels(unpack(allOuts))&#10;&#9;init = 1&#10;end&#10;i = 1 &#10;j = 1&#10;while i &lt; (noOfMarkers * 3) + 1 do&#10;&#9;markers[j] = {}&#10;&#9;markers[j][&quot;x&quot;] = inputs.get(&quot;Channel&quot;..i)&#10;&#9;markers[j][&quot;y&quot;] = inputs.get(&quot;Channel&quot;..i+1)&#10;&#9;markers[j][&quot;z&quot;] = inputs.get(&quot;Channel&quot;..i+2)&#10;&#9;i = i + 3&#10;&#9;j = j + 1&#10;end&#10;&#10;&#10;--processing&#10;x = 1&#10;y = 2&#10;for i = 1, expectedNoOfCombinations do&#10;&#9;--print(i, x, y)&#10;&#9;eculideanDistanceArray[i] = {getEuclideanDistance(markers[x], markers[y]), x , y}&#10;&#9;if y == noOfMarkers then&#10;&#9;&#9;x = x+1&#10;&#9;&#9;y = x+1&#10;&#9;else&#10;&#9;&#9;y = y+1&#10;&#9;end&#10;end&#10;&#10;eculideanDistanceArray = sortArrayAssending(eculideanDistanceArray)&#10;&#10;---[[&#10;print(&quot;Start&quot;)&#10;printArray(eculideanDistanceArray)&#10;print(&quot;Finish.....&quot;)&#10;--]]&#10;--[[&#10;&#9;print(&quot;---------&quot;)&#10;for i = 1, #markers do&#10;&#9;print(markers[i][&quot;x&quot;], markers[i][&quot;y&quot;], markers[i][&quot;z&quot;])&#10;end&#10;--]]&#10;&#10;findTibialArray(eculideanDistanceArray)&#10;findFemoralArray(eculideanDistanceArray)&#10;findEndEffectorArray(eculideanDistanceArray)&#10;findBaseArray(eculideanDistanceArray)&#10;findBlueProbe(eculideanDistanceArray)&#10;findGreenProbe(eculideanDistanceArray)&#10;&#10;--[[&#10;print(&quot;tibialArray&quot;, table.getn(tibialArray))&#10;print(&quot;femoralArray&quot;, table.getn(femoralArray))&#10;print(&quot;endEffectorArray&quot;, table.getn(endEffectorArray))&#10;print(&quot;baseArray&quot;, table.getn(baseArray))&#10;print(&quot;blueProbe&quot;, table.getn(blueProbe))&#10;print(&quot;greenProbe&quot;, table.getn(greenProbe))&#10;--]]&#10;&#10;--[[&#10;print(&quot;---------&quot;)&#10;printArray(tibialArray)&#10;print(&quot;---------&quot;)&#10;printArray(femoralArray)&#10;print(&quot;---------&quot;)&#10;printArray(endEffectorArray)&#10;print(&quot;---------&quot;)&#10;printArray(baseArray)&#10;print(&quot;---------&quot;)&#10;printArray(blueProbe)&#10;print(&quot;---------&quot;)&#10;printArray(greenProbe)&#10;print(&quot;---------&quot;)&#10;--]]&#10;---[[&#10;--First Getting the markers&#10;tibialArray = resolveArray(tibialArray)&#10;femoralArray = resolveArray(femoralArray)&#10;endEffectorArray = resolveArray(endEffectorArray)&#10;baseArray = resolveArray(baseArray)&#10;blueProbe = resolveArray(blueProbe)&#10;greenProbe = resolveArray(greenProbe)&#10;&#10;--[[&#10;print(&quot;tibialArray AAAAAAAAAAAAAAAAAA&quot;, table.getn(tibialArray))&#10;print(&quot;femoralArray AAAAAAAAAAAAAAAAAA&quot;, table.getn(femoralArray))&#10;print(&quot;endEffectorArray AAAAAAAAAAAAAAAAAA&quot;, table.getn(endEffectorArray))&#10;print(&quot;baseArray AAAAAAAAAAAAAAAAAA&quot;, table.getn(baseArray))&#10;print(&quot;blueProbe AAAAAAAAAAAAAAAAAA&quot;, table.getn(blueProbe))&#10;print(&quot;greenProbe AAAAAAAAAAAAAAAAAA&quot;, table.getn(greenProbe))&#10;--]]&#10;--[[&#10;printMarkersArray(tibialArray)&#10;printMarkersArray(femoralArray)&#10;printMarkersArray(endEffectorArray)&#10;printMarkersArray(baseArray)&#10;printMarkersArray(blueProbe)&#10;printMarkersArray(greenProbe)&#10;--]]&#10;&#10;&#10;--Channeling the markers of the Platform&#10;&#10;for i = 1, (table.getn(TibialArrayDims)) do&#10;&#9;if tibialArray[i] ~= nil then &#10;&#9;&#9;if tibialArray[i][&quot;x&quot;] ~= nil or tibialArray[i][&quot;y&quot;] ~= nil or tibialArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;--print(table.getn(tibialArray))&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; X&quot;, tibialArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Y&quot;, tibialArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Z&quot;, tibialArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Tibial Array &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;for i = 1, (table.getn(FemoralArrayDims)) do&#10;&#9;if femoralArray[i] ~= nil then&#10;&#9;&#9;if femoralArray[i][&quot;x&quot;] ~= nil or femoralArray[i][&quot;y&quot;] ~= nil or femoralArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; X&quot;, femoralArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Y&quot;, femoralArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Z&quot;, femoralArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Femoral Array &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;for i = 1, (table.getn(EndEffectorArrayDims)) do&#10;&#9;if endEffectorArray[i] ~= nil then&#10;&#9;&#9;if endEffectorArray[i][&quot;x&quot;] ~= nil or endEffectorArray[i][&quot;y&quot;] ~= nil or endEffectorArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; X&quot;, endEffectorArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; Y&quot;, endEffectorArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; Z&quot;, endEffectorArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;EndEffector Array &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;for i = 1, (table.getn(BaseArrayDims)) do&#10;&#9;if baseArray[i] ~= nil then&#10;&#9;&#9;if baseArray[i][&quot;x&quot;] ~= nil or baseArray[i][&quot;y&quot;] ~= nil or baseArray[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; X&quot;, baseArray[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; Y&quot;, baseArray[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; Z&quot;, baseArray[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Base Array &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;for i = 1, (table.getn(BlueProbeDims)) do&#10;&#9;if blueProbe[i] ~= nil then&#10;&#9;&#9;if blueProbe[i][&quot;x&quot;] ~= nil or blueProbe[i][&quot;y&quot;] ~= nil or blueProbe[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; X&quot;, blueProbe[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; Y&quot;, blueProbe[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; Z&quot;, blueProbe[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Blue Probe &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;&#10;for i = 1, (table.getn(GreenProbeDims)) do  &#10;&#9;if greenProbe[i] ~= nil then&#10;&#9;&#9;if greenProbe[i][&quot;x&quot;] ~= nil or greenProbe[i][&quot;y&quot;] ~= nil or greenProbe[i][&quot;z&quot;] ~= nil then&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; X&quot;, greenProbe[i][&quot;x&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; Y&quot;, greenProbe[i][&quot;y&quot;])&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; Z&quot;, greenProbe[i][&quot;z&quot;])&#10;&#9;&#9;else&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; X&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; Y&quot;, theForbiddenNumber)&#10;&#9;&#9;&#9;outputs.set(&quot;Green Probe &quot;..i..&quot; Z&quot;, theForbiddenNumber)&#10;&#9;&#9;end&#10;&#9;end&#10;end&#10;" collisions="false">
        <inputs>
          <StringArray/>
        </inputs>
        <outputs>
          <StringArray/>
        </outputs>
      </data>
    </module>
  </Modules>
  <Connectors>
    <connector id="20" src="14" trg="15" src_box="21" trg_box="22">
      <Boxes/>
      <Wires>
        <wire id="23" src="21" src_idx="0" trg="22" trg_idx="0"/>
        <wire id="24" src="21" src_idx="1" trg="22" trg_idx="1"/>
        <wire id="25" src="21" src_idx="2" trg="22" trg_idx="2"/>
        <wire id="26" src="21" src_idx="3" trg="22" trg_idx="3"/>
        <wire id="27" src="21" src_idx="4" trg="22" trg_idx="4"/>
        <wire id="28" src="21" src_idx="5" trg="22" trg_idx="5"/>
        <wire id="29" src="21" src_idx="6" trg="22" trg_idx="6"/>
        <wire id="30" src="21" src_idx="7" trg="22" trg_idx="7"/>
        <wire id="31" src="21" src_idx="8" trg="22" trg_idx="8"/>
        <wire id="32" src="21" src_idx="9" trg="22" trg_idx="9"/>
        <wire id="33" src="21" src_idx="10" trg="22" trg_idx="10"/>
        <wire id="34" src="21" src_idx="11" trg="22" trg_idx="11"/>
      </Wires>
    </connector>
    <connector id="35" src="16" trg="17" src_box="36" trg_box="37">
      <Boxes/>
      <Wires>
        <wire id="38" src="36" src_idx="0" trg="37" trg_idx="0"/>
        <wire id="39" src="36" src_idx="1" trg="37" trg_idx="1"/>
        <wire id="40" src="36" src_idx="2" trg="37" trg_idx="2"/>
        <wire id="41" src="36" src_idx="3" trg="37" trg_idx="3"/>
        <wire id="42" src="36" src_idx="4" trg="37" trg_idx="4"/>
        <wire id="43" src="36" src_idx="5" trg="37" trg_idx="5"/>
        <wire id="44" src="36" src_idx="6" trg="37" trg_idx="6"/>
        <wire id="45" src="36" src_idx="7" trg="37" trg_idx="7"/>
        <wire id="46" src="36" src_idx="8" trg="37" trg_idx="8"/>
        <wire id="47" src="36" src_idx="9" trg="37" trg_idx="9"/>
        <wire id="48" src="36" src_idx="10" trg="37" trg_idx="10"/>
        <wire id="49" src="36" src_idx="11" trg="37" trg_idx="11"/>
      </Wires>
    </connector>
    <connector id="50" src="2" trg="10" src_box="51" trg_box="52">
      <Boxes/>
      <Wires>
        <wire id="53" src="51" src_idx="0" trg="52" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="54" src="3" trg="10" src_box="55" trg_box="56">
      <Boxes/>
      <Wires>
        <wire id="57" src="55" src_idx="0" trg="56" trg_idx="1"/>
        <wire id="58" src="55" src_idx="1" trg="56" trg_idx="2"/>
        <wire id="59" src="55" src_idx="8" trg="56" trg_idx="3"/>
        <wire id="60" src="55" src_idx="9" trg="56" trg_idx="4"/>
        <wire id="61" src="55" src_idx="10" trg="56" trg_idx="5"/>
        <wire id="62" src="55" src_idx="11" trg="56" trg_idx="6"/>
        <wire id="63" src="55" src_idx="12" trg="56" trg_idx="7"/>
        <wire id="64" src="55" src_idx="13" trg="56" trg_idx="8"/>
      </Wires>
    </connector>
    <connector id="65" src="10" trg="11" src_box="66" trg_box="67">
      <Boxes/>
      <Wires>
        <wire id="68" src="66" src_idx="0" trg="67" trg_idx="0"/>
        <wire id="69" src="66" src_idx="1" trg="67" trg_idx="1"/>
        <wire id="70" src="66" src_idx="2" trg="67" trg_idx="2"/>
        <wire id="71" src="66" src_idx="3" trg="67" trg_idx="3"/>
        <wire id="72" src="66" src_idx="4" trg="67" trg_idx="4"/>
        <wire id="73" src="66" src_idx="5" trg="67" trg_idx="5"/>
        <wire id="74" src="66" src_idx="6" trg="67" trg_idx="6"/>
        <wire id="75" src="66" src_idx="7" trg="67" trg_idx="7"/>
        <wire id="76" src="66" src_idx="8" trg="67" trg_idx="8"/>
        <wire id="77" src="66" src_idx="9" trg="67" trg_idx="9"/>
        <wire id="78" src="66" src_idx="10" trg="67" trg_idx="10"/>
        <wire id="79" src="66" src_idx="11" trg="67" trg_idx="11"/>
      </Wires>
    </connector>
    <connector id="80" src="10" trg="5" src_box="81" trg_box="82">
      <Boxes/>
      <Wires>
        <wire id="83" src="81" src_idx="12" trg="82" trg_idx="1"/>
      </Wires>
    </connector>
    <connector id="84" src="12" trg="5" src_box="85" trg_box="86">
      <Boxes/>
      <Wires>
        <wire id="87" src="85" src_idx="12" trg="86" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="88" src="2" trg="12" src_box="89" trg_box="90">
      <Boxes/>
      <Wires>
        <wire id="91" src="89" src_idx="0" trg="90" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="92" src="3" trg="12" src_box="93" trg_box="94">
      <Boxes/>
      <Wires>
        <wire id="95" src="93" src_idx="0" trg="94" trg_idx="1"/>
        <wire id="96" src="93" src_idx="1" trg="94" trg_idx="2"/>
        <wire id="97" src="93" src_idx="2" trg="94" trg_idx="3"/>
        <wire id="98" src="93" src_idx="3" trg="94" trg_idx="4"/>
        <wire id="99" src="93" src_idx="4" trg="94" trg_idx="5"/>
        <wire id="100" src="93" src_idx="5" trg="94" trg_idx="6"/>
        <wire id="101" src="93" src_idx="6" trg="94" trg_idx="7"/>
        <wire id="102" src="93" src_idx="7" trg="94" trg_idx="8"/>
      </Wires>
    </connector>
    <connector id="103" src="2" trg="4" src_box="104" trg_box="105">
      <Boxes/>
      <Wires>
        <wire id="106" src="104" src_idx="0" trg="105" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="107" src="3" trg="4" src_box="108" trg_box="109">
      <Boxes/>
      <Wires>
        <wire id="110" src="108" src_idx="0" trg="109" trg_idx="1"/>
        <wire id="111" src="108" src_idx="1" trg="109" trg_idx="2"/>
        <wire id="112" src="108" src_idx="14" trg="109" trg_idx="3"/>
        <wire id="113" src="108" src_idx="15" trg="109" trg_idx="4"/>
        <wire id="114" src="108" src_idx="16" trg="109" trg_idx="5"/>
      </Wires>
    </connector>
    <connector id="115" src="4" trg="5" src_box="116" trg_box="117">
      <Boxes/>
      <Wires>
        <wire id="118" src="116" src_idx="9" trg="117" trg_idx="5"/>
      </Wires>
    </connector>
    <connector id="119" src="4" trg="6" src_box="120" trg_box="121">
      <Boxes/>
      <Wires>
        <wire id="122" src="120" src_idx="0" trg="121" trg_idx="0"/>
        <wire id="123" src="120" src_idx="1" trg="121" trg_idx="1"/>
        <wire id="124" src="120" src_idx="2" trg="121" trg_idx="2"/>
        <wire id="125" src="120" src_idx="3" trg="121" trg_idx="3"/>
        <wire id="126" src="120" src_idx="4" trg="121" trg_idx="4"/>
        <wire id="127" src="120" src_idx="5" trg="121" trg_idx="5"/>
        <wire id="128" src="120" src_idx="6" trg="121" trg_idx="6"/>
        <wire id="129" src="120" src_idx="7" trg="121" trg_idx="7"/>
        <wire id="130" src="120" src_idx="8" trg="121" trg_idx="8"/>
      </Wires>
    </connector>
    <connector id="131" src="1" trg="12" src_box="132" trg_box="133">
      <Boxes/>
      <Wires>
        <wire id="134" src="132" src_idx="0" trg="133" trg_idx="9"/>
        <wire id="135" src="132" src_idx="1" trg="133" trg_idx="10"/>
        <wire id="136" src="132" src_idx="2" trg="133" trg_idx="11"/>
        <wire id="137" src="132" src_idx="3" trg="133" trg_idx="12"/>
        <wire id="138" src="132" src_idx="4" trg="133" trg_idx="13"/>
        <wire id="139" src="132" src_idx="5" trg="133" trg_idx="14"/>
        <wire id="140" src="132" src_idx="6" trg="133" trg_idx="15"/>
        <wire id="141" src="132" src_idx="7" trg="133" trg_idx="16"/>
        <wire id="142" src="132" src_idx="8" trg="133" trg_idx="17"/>
        <wire id="143" src="132" src_idx="9" trg="133" trg_idx="18"/>
        <wire id="144" src="132" src_idx="10" trg="133" trg_idx="19"/>
        <wire id="145" src="132" src_idx="11" trg="133" trg_idx="20"/>
        <wire id="146" src="132" src_idx="12" trg="133" trg_idx="21"/>
        <wire id="147" src="132" src_idx="13" trg="133" trg_idx="22"/>
        <wire id="148" src="132" src_idx="14" trg="133" trg_idx="23"/>
        <wire id="149" src="132" src_idx="15" trg="133" trg_idx="24"/>
        <wire id="150" src="132" src_idx="16" trg="133" trg_idx="25"/>
        <wire id="151" src="132" src_idx="17" trg="133" trg_idx="26"/>
        <wire id="152" src="132" src_idx="18" trg="133" trg_idx="27"/>
        <wire id="153" src="132" src_idx="19" trg="133" trg_idx="28"/>
        <wire id="154" src="132" src_idx="20" trg="133" trg_idx="29"/>
        <wire id="155" src="132" src_idx="21" trg="133" trg_idx="30"/>
        <wire id="156" src="132" src_idx="22" trg="133" trg_idx="31"/>
        <wire id="157" src="132" src_idx="23" trg="133" trg_idx="32"/>
        <wire id="158" src="132" src_idx="24" trg="133" trg_idx="33"/>
        <wire id="159" src="132" src_idx="25" trg="133" trg_idx="34"/>
        <wire id="160" src="132" src_idx="26" trg="133" trg_idx="35"/>
        <wire id="161" src="132" src_idx="27" trg="133" trg_idx="36"/>
        <wire id="162" src="132" src_idx="28" trg="133" trg_idx="37"/>
        <wire id="163" src="132" src_idx="29" trg="133" trg_idx="38"/>
        <wire id="164" src="132" src_idx="30" trg="133" trg_idx="39"/>
        <wire id="165" src="132" src_idx="31" trg="133" trg_idx="40"/>
        <wire id="166" src="132" src_idx="32" trg="133" trg_idx="41"/>
        <wire id="167" src="132" src_idx="33" trg="133" trg_idx="42"/>
        <wire id="168" src="132" src_idx="34" trg="133" trg_idx="43"/>
        <wire id="169" src="132" src_idx="35" trg="133" trg_idx="44"/>
      </Wires>
    </connector>
    <connector id="170" src="1" trg="10" src_box="171" trg_box="172">
      <Boxes/>
      <Wires>
        <wire id="173" src="171" src_idx="0" trg="172" trg_idx="9"/>
        <wire id="174" src="171" src_idx="1" trg="172" trg_idx="10"/>
        <wire id="175" src="171" src_idx="2" trg="172" trg_idx="11"/>
        <wire id="176" src="171" src_idx="3" trg="172" trg_idx="12"/>
        <wire id="177" src="171" src_idx="4" trg="172" trg_idx="13"/>
        <wire id="178" src="171" src_idx="5" trg="172" trg_idx="14"/>
        <wire id="179" src="171" src_idx="6" trg="172" trg_idx="15"/>
        <wire id="180" src="171" src_idx="7" trg="172" trg_idx="16"/>
        <wire id="181" src="171" src_idx="8" trg="172" trg_idx="17"/>
        <wire id="182" src="171" src_idx="9" trg="172" trg_idx="18"/>
        <wire id="183" src="171" src_idx="10" trg="172" trg_idx="19"/>
        <wire id="184" src="171" src_idx="11" trg="172" trg_idx="20"/>
        <wire id="185" src="171" src_idx="12" trg="172" trg_idx="21"/>
        <wire id="186" src="171" src_idx="13" trg="172" trg_idx="22"/>
        <wire id="187" src="171" src_idx="14" trg="172" trg_idx="23"/>
        <wire id="188" src="171" src_idx="15" trg="172" trg_idx="24"/>
        <wire id="189" src="171" src_idx="16" trg="172" trg_idx="25"/>
        <wire id="190" src="171" src_idx="17" trg="172" trg_idx="26"/>
        <wire id="191" src="171" src_idx="18" trg="172" trg_idx="27"/>
        <wire id="192" src="171" src_idx="19" trg="172" trg_idx="28"/>
        <wire id="193" src="171" src_idx="20" trg="172" trg_idx="29"/>
        <wire id="194" src="171" src_idx="21" trg="172" trg_idx="30"/>
        <wire id="195" src="171" src_idx="22" trg="172" trg_idx="31"/>
        <wire id="196" src="171" src_idx="23" trg="172" trg_idx="32"/>
        <wire id="197" src="171" src_idx="24" trg="172" trg_idx="33"/>
        <wire id="198" src="171" src_idx="25" trg="172" trg_idx="34"/>
        <wire id="199" src="171" src_idx="26" trg="172" trg_idx="35"/>
        <wire id="200" src="171" src_idx="27" trg="172" trg_idx="36"/>
        <wire id="201" src="171" src_idx="28" trg="172" trg_idx="37"/>
        <wire id="202" src="171" src_idx="29" trg="172" trg_idx="38"/>
        <wire id="203" src="171" src_idx="30" trg="172" trg_idx="39"/>
        <wire id="204" src="171" src_idx="31" trg="172" trg_idx="40"/>
        <wire id="205" src="171" src_idx="32" trg="172" trg_idx="41"/>
        <wire id="206" src="171" src_idx="33" trg="172" trg_idx="42"/>
        <wire id="207" src="171" src_idx="34" trg="172" trg_idx="43"/>
        <wire id="208" src="171" src_idx="35" trg="172" trg_idx="44"/>
      </Wires>
    </connector>
    <connector id="209" src="1" trg="4" src_box="210" trg_box="211">
      <Boxes/>
      <Wires>
        <wire id="212" src="210" src_idx="0" trg="211" trg_idx="6"/>
        <wire id="213" src="210" src_idx="1" trg="211" trg_idx="7"/>
        <wire id="214" src="210" src_idx="2" trg="211" trg_idx="8"/>
        <wire id="215" src="210" src_idx="3" trg="211" trg_idx="9"/>
        <wire id="216" src="210" src_idx="4" trg="211" trg_idx="10"/>
        <wire id="217" src="210" src_idx="5" trg="211" trg_idx="11"/>
        <wire id="218" src="210" src_idx="6" trg="211" trg_idx="12"/>
        <wire id="219" src="210" src_idx="7" trg="211" trg_idx="13"/>
        <wire id="220" src="210" src_idx="8" trg="211" trg_idx="14"/>
        <wire id="221" src="210" src_idx="9" trg="211" trg_idx="15"/>
        <wire id="222" src="210" src_idx="10" trg="211" trg_idx="16"/>
        <wire id="223" src="210" src_idx="11" trg="211" trg_idx="17"/>
        <wire id="224" src="210" src_idx="12" trg="211" trg_idx="18"/>
        <wire id="225" src="210" src_idx="13" trg="211" trg_idx="19"/>
        <wire id="226" src="210" src_idx="14" trg="211" trg_idx="20"/>
        <wire id="227" src="210" src_idx="15" trg="211" trg_idx="21"/>
        <wire id="228" src="210" src_idx="16" trg="211" trg_idx="22"/>
        <wire id="229" src="210" src_idx="17" trg="211" trg_idx="23"/>
        <wire id="230" src="210" src_idx="18" trg="211" trg_idx="24"/>
        <wire id="231" src="210" src_idx="19" trg="211" trg_idx="25"/>
        <wire id="232" src="210" src_idx="20" trg="211" trg_idx="26"/>
        <wire id="233" src="210" src_idx="21" trg="211" trg_idx="27"/>
        <wire id="234" src="210" src_idx="22" trg="211" trg_idx="28"/>
        <wire id="235" src="210" src_idx="23" trg="211" trg_idx="29"/>
        <wire id="236" src="210" src_idx="24" trg="211" trg_idx="30"/>
        <wire id="237" src="210" src_idx="25" trg="211" trg_idx="31"/>
        <wire id="238" src="210" src_idx="26" trg="211" trg_idx="32"/>
        <wire id="239" src="210" src_idx="27" trg="211" trg_idx="33"/>
        <wire id="240" src="210" src_idx="28" trg="211" trg_idx="34"/>
        <wire id="241" src="210" src_idx="29" trg="211" trg_idx="35"/>
        <wire id="242" src="210" src_idx="30" trg="211" trg_idx="36"/>
        <wire id="243" src="210" src_idx="31" trg="211" trg_idx="37"/>
        <wire id="244" src="210" src_idx="32" trg="211" trg_idx="38"/>
        <wire id="245" src="210" src_idx="33" trg="211" trg_idx="39"/>
        <wire id="246" src="210" src_idx="34" trg="211" trg_idx="40"/>
        <wire id="247" src="210" src_idx="35" trg="211" trg_idx="41"/>
      </Wires>
    </connector>
    <connector id="248" src="2" trg="9" src_box="249" trg_box="250">
      <Boxes/>
      <Wires>
        <wire id="251" src="249" src_idx="0" trg="250" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="252" src="3" trg="9" src_box="253" trg_box="254">
      <Boxes/>
      <Wires>
        <wire id="255" src="253" src_idx="0" trg="254" trg_idx="1"/>
        <wire id="256" src="253" src_idx="1" trg="254" trg_idx="2"/>
      </Wires>
    </connector>
    <connector id="257" src="6" trg="9" src_box="258" trg_box="259">
      <Boxes/>
      <Wires>
        <wire id="260" src="258" src_idx="0" trg="259" trg_idx="7"/>
        <wire id="261" src="258" src_idx="1" trg="259" trg_idx="3"/>
        <wire id="262" src="258" src_idx="2" trg="259" trg_idx="4"/>
        <wire id="263" src="258" src_idx="3" trg="259" trg_idx="5"/>
      </Wires>
    </connector>
    <connector id="264" src="7" trg="9" src_box="265" trg_box="266">
      <Boxes/>
      <Wires>
        <wire id="267" src="265" src_idx="0" trg="266" trg_idx="6"/>
      </Wires>
    </connector>
    <connector id="268" src="2" trg="8" src_box="269" trg_box="270">
      <Boxes/>
      <Wires>
        <wire id="271" src="269" src_idx="0" trg="270" trg_idx="0"/>
      </Wires>
    </connector>
    <connector id="272" src="3" trg="8" src_box="273" trg_box="274">
      <Boxes/>
      <Wires>
        <wire id="275" src="273" src_idx="0" trg="274" trg_idx="1"/>
        <wire id="276" src="273" src_idx="1" trg="274" trg_idx="2"/>
      </Wires>
    </connector>
    <connector id="277" src="6" trg="8" src_box="278" trg_box="279">
      <Boxes/>
      <Wires>
        <wire id="280" src="278" src_idx="0" trg="279" trg_idx="7"/>
        <wire id="281" src="278" src_idx="1" trg="279" trg_idx="3"/>
        <wire id="282" src="278" src_idx="2" trg="279" trg_idx="4"/>
        <wire id="283" src="278" src_idx="3" trg="279" trg_idx="5"/>
      </Wires>
    </connector>
    <connector id="284" src="7" trg="8" src_box="285" trg_box="286">
      <Boxes/>
      <Wires>
        <wire id="287" src="285" src_idx="0" trg="286" trg_idx="6"/>
      </Wires>
    </connector>
  </Connectors>
</Caren2Project>
